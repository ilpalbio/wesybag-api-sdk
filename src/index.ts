/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable no-trailing-spaces */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable quote-props */
/* eslint-disable @typescript-eslint/member-delimiter-style */
/**
 * This file was automatically generated by sf-ts-sdk-gen.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source
 * openapi definition and regenerate this file.
 */

import type { AxiosStatic, AxiosInstance, AxiosResponse, AxiosRequestConfig, AxiosError } from "axios"

import deepmerge from "deepmerge"

function _isObject(o: any): boolean {
  return Object.prototype.toString.call(o) === "[object Object]"
}

export function isPlainObject(o: any): boolean {
  if (_isObject(o) === false) {
    return false
  }

  const ctor = o.constructor
  if (ctor === undefined) {
    return true
  }

  const prot = ctor.prototype
  if (_isObject(prot) === false) {
    return false
  }

  if (Object.prototype.hasOwnProperty.call(prot, "isPrototypeOf") === false) {
    return false
  }

  return true
}

export const SDK_VERSION = "0.1.0"

export const API_VERSION = "1.0.0"

export let axios: AxiosStatic | AxiosInstance | undefined

export type Env = "local" | "staging" | string

export let env: Env | undefined

export type HandledResponses = { [status: string]: { code: string[] | null } }

const _throwOnUnexpectedResponse = (handledResponses: HandledResponses, response: AxiosResponse): void => {
  const handledResponsesForStatus = handledResponses[response.status]
  if (handledResponsesForStatus) {
    const handledResponseCodes = handledResponsesForStatus.code
    if (Array.isArray(handledResponseCodes)) {
      if (!handledResponseCodes.includes(response.data.code)) {
        throw new ResponseError({
          message: `Unexpected response code: ${response.data.code}`,
          code: "UNEXPECTED_RESPONSE",
          response
        })
      }
    }
  } else {
    throw new ResponseError({
      message: `Unexpected response status code: ${response.status}`,
      code: "UNEXPECTED_RESPONSE",
      response
    })
  }
}

export class ResponseError<T> extends Error {
  code: string
  response: T

  constructor({ message, code, response }: { message: string, code: string, response: T }) {
    super(message)
    this.code = code
    this.response = response
  }
}

export const serverUrls: { [env in Env]: string } = {
  "local": "http://localhost:3000",
  "staging": "http://localhost:3000"
}

function _getFnUrl(endpoint: string, options?: { path?: { [key: string]: any }, params?: { [key: string]: any } }): string {
  const baseUrl = serverUrls[env!.toLowerCase()]
  if (!baseUrl) {
    throw new Error(`Invalid env: ${env}`)
  }

  if (options?.path) {
    Object.entries(options.path).forEach(([key, value]) => {
      endpoint = endpoint.replace(`{${key}}`, String(value))
    })
  }

  endpoint = endpoint.replace(/{.*?}/g, "")

  const url = new URL(baseUrl.replace(/\/$/, "") + "/" + endpoint.replace(/^\//, ""))
  if (options?.params) {
    Object.entries(options.params).forEach(([key, value]) => {
      url.searchParams.set(key, typeof value === "object" ? JSON.stringify(value) : value)
    })
  }

  return url.toString()
}

export function setup(params: {
  axios: AxiosStatic | AxiosInstance
  env: Env
  customServerUrls?: { [env: string]: string }
}): void {
  axios = params.axios
  env = params.env
  if (params.customServerUrls) {
    Object.assign(serverUrls, params.customServerUrls)
  }
  if (!serverUrls[env]) {
    throw new Error(`Missing server url for env: ${env}`)
  }
}

const _checkSetup = (): void => {
  if (!axios) {
    throw new Error("axios is not defined. Please run the sdk.setup() function or set axios instance to the sdk.")
  }
  if (!env) {
    throw new Error("env is not defined. Please run the sdk.setup() function or set env to the sdk.")
  }
}

/**
Delete normal shipment by id
*/
export type AxiosDeleteNormalShipmentSuccessResponse = (AxiosResponse<DeleteNormalShipment200ResponseSchema> & { status: 200 })
export type AxiosDeleteNormalShipmentErrorResponse = ((AxiosResponse<DeleteNormalShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeleteNormalShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeleteNormalShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeleteNormalShipment409ResponseSchema> & { status: 409 }) | (AxiosResponse<DeleteNormalShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeleteNormalShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeleteNormalShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/deleteNormalShipment" }
export type AxiosDeleteNormalShipmentResponse = AxiosDeleteNormalShipmentSuccessResponse | AxiosDeleteNormalShipmentErrorResponse
export async function deleteNormalShipment(data: DeleteNormalShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosDeleteNormalShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/deleteNormalShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeleteNormalShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeleteNormalShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get shipment by id/ids
*/
export type AxiosGetNormalShipmentSuccessResponse = (AxiosResponse<GetNormalShipment200ResponseSchema> & { status: 200 })
export type AxiosGetNormalShipmentErrorResponse = ((AxiosResponse<GetNormalShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetNormalShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetNormalShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetNormalShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetNormalShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetNormalShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getNormalShipment" }
export type AxiosGetNormalShipmentResponse = AxiosGetNormalShipmentSuccessResponse | AxiosGetNormalShipmentErrorResponse
export async function getNormalShipment(data: GetNormalShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetNormalShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getNormalShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetNormalShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetNormalShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Create new travel from draft or pending shipment
*/
export type AxiosCreateNormalShipmentSuccessResponse = (AxiosResponse<CreateNormalShipment200ResponseSchema> & { status: 200 })
export type AxiosCreateNormalShipmentErrorResponse = ((AxiosResponse<CreateNormalShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<CreateNormalShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<CreateNormalShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<CreateNormalShipment409ResponseSchema> & { status: 409 }) | (AxiosResponse<CreateNormalShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<CreateNormalShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<CreateNormalShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/createNormalShipment" }
export type AxiosCreateNormalShipmentResponse = AxiosCreateNormalShipmentSuccessResponse | AxiosCreateNormalShipmentErrorResponse
export async function createNormalShipment(data: CreateNormalShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCreateNormalShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/createNormalShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCreateNormalShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCreateNormalShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Create new pending shipment by draft
*/
export type AxiosCreatePendingShipmentSuccessResponse = (AxiosResponse<CreatePendingShipment200ResponseSchema> & { status: 200 })
export type AxiosCreatePendingShipmentErrorResponse = ((AxiosResponse<CreatePendingShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<CreatePendingShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<CreatePendingShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<CreatePendingShipment409ResponseSchema> & { status: 409 }) | (AxiosResponse<CreatePendingShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<CreatePendingShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<CreatePendingShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/createPendingShipment" }
export type AxiosCreatePendingShipmentResponse = AxiosCreatePendingShipmentSuccessResponse | AxiosCreatePendingShipmentErrorResponse
export async function createPendingShipment(data: CreatePendingShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCreatePendingShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/createPendingShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCreatePendingShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCreatePendingShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get pending shipment by id/ids
*/
export type AxiosGetPendingShipmentSuccessResponse = (AxiosResponse<GetPendingShipment200ResponseSchema> & { status: 200 })
export type AxiosGetPendingShipmentErrorResponse = ((AxiosResponse<GetPendingShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetPendingShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetPendingShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetPendingShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetPendingShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetPendingShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getPendingShipment" }
export type AxiosGetPendingShipmentResponse = AxiosGetPendingShipmentSuccessResponse | AxiosGetPendingShipmentErrorResponse
export async function getPendingShipment(data: GetPendingShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetPendingShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getPendingShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetPendingShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetPendingShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Delete pending shipment by id
*/
export type AxiosDeletePendingShipmentSuccessResponse = (AxiosResponse<DeletePendingShipment200ResponseSchema> & { status: 200 })
export type AxiosDeletePendingShipmentErrorResponse = ((AxiosResponse<DeletePendingShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeletePendingShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeletePendingShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeletePendingShipment409ResponseSchema> & { status: 409 }) | (AxiosResponse<DeletePendingShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeletePendingShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeletePendingShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/deletePendingShipment" }
export type AxiosDeletePendingShipmentResponse = AxiosDeletePendingShipmentSuccessResponse | AxiosDeletePendingShipmentErrorResponse
export async function deletePendingShipment(data: DeletePendingShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosDeletePendingShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/deletePendingShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeletePendingShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeletePendingShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Calculate an estimate cost of a shipment
*/
export type AxiosGetCostEstimateSuccessResponse = (AxiosResponse<GetCostEstimate200ResponseSchema> & { status: 200 })
export type AxiosGetCostEstimateErrorResponse = ((AxiosResponse<GetCostEstimate400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetCostEstimate404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetCostEstimate405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetCostEstimate415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetCostEstimate429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetCostEstimate500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getCostEstimate" }
export type AxiosGetCostEstimateResponse = AxiosGetCostEstimateSuccessResponse | AxiosGetCostEstimateErrorResponse
export async function getCostEstimate(data: GetCostEstimateRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetCostEstimateResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getCostEstimate"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetCostEstimateSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetCostEstimateErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get the pickup schedule of a shipment
*/
export type AxiosGetPickupScheduleSuccessResponse = (AxiosResponse<GetPickupSchedule200ResponseSchema> & { status: 200 })
export type AxiosGetPickupScheduleErrorResponse = ((AxiosResponse<GetPickupSchedule400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetPickupSchedule404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetPickupSchedule405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetPickupSchedule415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetPickupSchedule429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetPickupSchedule500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getPickupSchedule" }
export type AxiosGetPickupScheduleResponse = AxiosGetPickupScheduleSuccessResponse | AxiosGetPickupScheduleErrorResponse
export async function getPickupSchedule(data: GetPickupScheduleRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetPickupScheduleResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getPickupSchedule"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetPickupScheduleSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetPickupScheduleErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get delivery schedule for a shipment
*/
export type AxiosGetDeliveryScheduleSuccessResponse = (AxiosResponse<GetDeliverySchedule200ResponseSchema> & { status: 200 })
export type AxiosGetDeliveryScheduleErrorResponse = ((AxiosResponse<GetDeliverySchedule400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetDeliverySchedule404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetDeliverySchedule405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetDeliverySchedule415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetDeliverySchedule429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetDeliverySchedule500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getDeliverySchedule" }
export type AxiosGetDeliveryScheduleResponse = AxiosGetDeliveryScheduleSuccessResponse | AxiosGetDeliveryScheduleErrorResponse
export async function getDeliverySchedule(data: GetDeliveryScheduleRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetDeliveryScheduleResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getDeliverySchedule"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetDeliveryScheduleSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetDeliveryScheduleErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get shipments by id without knowing if it is pending or normal
*/
export type AxiosGetGenericShipmentSuccessResponse = (AxiosResponse<GetGenericShipment200ResponseSchema> & { status: 200 })
export type AxiosGetGenericShipmentErrorResponse = ((AxiosResponse<GetGenericShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetGenericShipment401ResponseSchema> & { status: 401 }) | (AxiosResponse<GetGenericShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetGenericShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetGenericShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetGenericShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetGenericShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getGenericShipment" }
export type AxiosGetGenericShipmentResponse = AxiosGetGenericShipmentSuccessResponse | AxiosGetGenericShipmentErrorResponse
export async function getGenericShipment(data: GetGenericShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetGenericShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getGenericShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetGenericShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetGenericShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get the optimal courier for a shipment based on position and luggages
*/
export type AxiosGetOptimalCourierSuccessResponse = (AxiosResponse<GetOptimalCourier200ResponseSchema> & { status: 200 })
export type AxiosGetOptimalCourierErrorResponse = ((AxiosResponse<GetOptimalCourier400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetOptimalCourier404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetOptimalCourier405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetOptimalCourier415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetOptimalCourier429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetOptimalCourier500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getOptimalCourier" }
export type AxiosGetOptimalCourierResponse = AxiosGetOptimalCourierSuccessResponse | AxiosGetOptimalCourierErrorResponse
export async function getOptimalCourier(data: GetOptimalCourierRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetOptimalCourierResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getOptimalCourier"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetOptimalCourierSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetOptimalCourierErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get courier additional options such as insurance, cash on delivery, etc.
*/
export type AxiosGetCourierAdditionalsSuccessResponse = (AxiosResponse<GetCourierAdditionals200ResponseSchema> & { status: 200 })
export type AxiosGetCourierAdditionalsErrorResponse = ((AxiosResponse<GetCourierAdditionals400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetCourierAdditionals404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetCourierAdditionals405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetCourierAdditionals415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetCourierAdditionals429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetCourierAdditionals500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getCourierAdditionals" }
export type AxiosGetCourierAdditionalsResponse = AxiosGetCourierAdditionalsSuccessResponse | AxiosGetCourierAdditionalsErrorResponse
export async function getCourierAdditionals(data: GetCourierAdditionalsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetCourierAdditionalsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getCourierAdditionals"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetCourierAdditionalsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetCourierAdditionalsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all shipment optionals available
*/
export type AxiosGetShipmentOptionalsSuccessResponse = (AxiosResponse<GetShipmentOptionals200ResponseSchema> & { status: 200 })
export type AxiosGetShipmentOptionalsErrorResponse = ((AxiosResponse<GetShipmentOptionals400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetShipmentOptionals405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetShipmentOptionals415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetShipmentOptionals429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetShipmentOptionals500ResponseSchema> & { status: 500 })) & { path: "/v1/shipments/getShipmentOptionals" }
export type AxiosGetShipmentOptionalsResponse = AxiosGetShipmentOptionalsSuccessResponse | AxiosGetShipmentOptionalsErrorResponse
export async function getShipmentOptionals(config?: AxiosRequestConfig): Promise<AxiosGetShipmentOptionalsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/shipments/getShipmentOptionals"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetShipmentOptionalsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetShipmentOptionalsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get luggages packages
*/
export type AxiosGetLuggagesPackagesSuccessResponse = (AxiosResponse<GetLuggagesPackages200ResponseSchema> & { status: 200 })
export type AxiosGetLuggagesPackagesErrorResponse = ((AxiosResponse<GetLuggagesPackages400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetLuggagesPackages404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetLuggagesPackages405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetLuggagesPackages415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetLuggagesPackages429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetLuggagesPackages500ResponseSchema> & { status: 500 })) & { path: "/v1/packages/getLuggagesPackages" }
export type AxiosGetLuggagesPackagesResponse = AxiosGetLuggagesPackagesSuccessResponse | AxiosGetLuggagesPackagesErrorResponse
export async function getLuggagesPackages(data: GetLuggagesPackagesRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetLuggagesPackagesResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/packages/getLuggagesPackages"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetLuggagesPackagesSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetLuggagesPackagesErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get available hotel offers available
*/
export type AxiosGetHotelOffersSuccessResponse = (AxiosResponse<GetHotelOffers200ResponseSchema> & { status: 200 })
export type AxiosGetHotelOffersErrorResponse = ((AxiosResponse<GetHotelOffers400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetHotelOffers405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetHotelOffers415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetHotelOffers429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetHotelOffers500ResponseSchema> & { status: 500 })) & { path: "/v1/packages/getHotelOffers" }
export type AxiosGetHotelOffersResponse = AxiosGetHotelOffersSuccessResponse | AxiosGetHotelOffersErrorResponse
export async function getHotelOffers(config?: AxiosRequestConfig): Promise<AxiosGetHotelOffersResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/packages/getHotelOffers"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetHotelOffersSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetHotelOffersErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get hotel products by id of the hotel
*/
export type AxiosGetHotelProductsSuccessResponse = (AxiosResponse<GetHotelProducts200ResponseSchema> & { status: 200 })
export type AxiosGetHotelProductsErrorResponse = ((AxiosResponse<GetHotelProducts400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetHotelProducts404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetHotelProducts405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetHotelProducts415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetHotelProducts429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetHotelProducts500ResponseSchema> & { status: 500 })) & { path: "/v1/packages/getHotelProducts" }
export type AxiosGetHotelProductsResponse = AxiosGetHotelProductsSuccessResponse | AxiosGetHotelProductsErrorResponse
export async function getHotelProducts(data: GetHotelProductsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetHotelProductsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/packages/getHotelProducts"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetHotelProductsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetHotelProductsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Log the user in
*/
export type AxiosLogUserSuccessResponse = (AxiosResponse<LogUser200ResponseSchema> & { status: 200 })
export type AxiosLogUserErrorResponse = ((AxiosResponse<LogUser400ResponseSchema> & { status: 400 }) | (AxiosResponse<LogUser404ResponseSchema> & { status: 404 }) | (AxiosResponse<LogUser405ResponseSchema> & { status: 405 }) | (AxiosResponse<LogUser415ResponseSchema> & { status: 415 }) | (AxiosResponse<LogUser429ResponseSchema> & { status: 429 }) | (AxiosResponse<LogUser500ResponseSchema> & { status: 500 })) & { path: "/v1/base/logUser" }
export type AxiosLogUserResponse = AxiosLogUserSuccessResponse | AxiosLogUserErrorResponse
export async function logUser(data: LogUserRequestSchema, config?: AxiosRequestConfig): Promise<AxiosLogUserResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/base/logUser"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosLogUserSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosLogUserErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify remember token
*/
export type AxiosVerifyRememberTokenSuccessResponse = (AxiosResponse<VerifyRememberToken200ResponseSchema> & { status: 200 })
export type AxiosVerifyRememberTokenErrorResponse = ((AxiosResponse<VerifyRememberToken400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyRememberToken401ResponseSchema> & { status: 401 }) | (AxiosResponse<VerifyRememberToken405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyRememberToken415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyRememberToken429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyRememberToken500ResponseSchema> & { status: 500 })) & { path: "/v1/base/verifyRememberToken" }
export type AxiosVerifyRememberTokenResponse = AxiosVerifyRememberTokenSuccessResponse | AxiosVerifyRememberTokenErrorResponse
export async function verifyRememberToken(data: VerifyRememberTokenRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyRememberTokenResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "INVALID TOKEN"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/base/verifyRememberToken"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyRememberTokenSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyRememberTokenErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all available structures by ids
*/
export type AxiosGetStructuresSuccessResponse = (AxiosResponse<GetStructures200ResponseSchema> & { status: 200 })
export type AxiosGetStructuresErrorResponse = ((AxiosResponse<GetStructures400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetStructures404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetStructures405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetStructures415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetStructures429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetStructures500ResponseSchema> & { status: 500 })) & { path: "/v1/base/getStructures" }
export type AxiosGetStructuresResponse = AxiosGetStructuresSuccessResponse | AxiosGetStructuresErrorResponse
export async function getStructures(data: GetStructuresRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetStructuresResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/base/getStructures"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetStructuresSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetStructuresErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get available luggage contents
*/
export type AxiosGetLuggageContentsSuccessResponse = (AxiosResponse<GetLuggageContents200ResponseSchema> & { status: 200 })
export type AxiosGetLuggageContentsErrorResponse = ((AxiosResponse<GetLuggageContents400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetLuggageContents404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetLuggageContents405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetLuggageContents415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetLuggageContents429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetLuggageContents500ResponseSchema> & { status: 500 })) & { path: "/v1/base/getLuggageContents" }
export type AxiosGetLuggageContentsResponse = AxiosGetLuggageContentsSuccessResponse | AxiosGetLuggageContentsErrorResponse
export async function getLuggageContents(data: GetLuggageContentsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetLuggageContentsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/base/getLuggageContents"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetLuggageContentsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetLuggageContentsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Return user settings
*/
export type AxiosGetUserSettingsSuccessResponse = (AxiosResponse<GetUserSettings200ResponseSchema> & { status: 200 })
export type AxiosGetUserSettingsErrorResponse = ((AxiosResponse<GetUserSettings400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetUserSettings404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetUserSettings405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetUserSettings415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetUserSettings429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetUserSettings500ResponseSchema> & { status: 500 })) & { path: "/v1/user/getUserSettings" }
export type AxiosGetUserSettingsResponse = AxiosGetUserSettingsSuccessResponse | AxiosGetUserSettingsErrorResponse
export async function getUserSettings(config?: AxiosRequestConfig): Promise<AxiosGetUserSettingsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/getUserSettings"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetUserSettingsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetUserSettingsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Delete user
*/
export type AxiosDeleteUserSuccessResponse = (AxiosResponse<DeleteUser200ResponseSchema> & { status: 200 })
export type AxiosDeleteUserErrorResponse = ((AxiosResponse<DeleteUser400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeleteUser404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeleteUser405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeleteUser409ResponseSchema> & { status: 409 }) | (AxiosResponse<DeleteUser415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeleteUser429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeleteUser500ResponseSchema> & { status: 500 })) & { path: "/v1/user/deleteUser" }
export type AxiosDeleteUserResponse = AxiosDeleteUserSuccessResponse | AxiosDeleteUserErrorResponse
export async function deleteUser(config?: AxiosRequestConfig): Promise<AxiosDeleteUserResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/deleteUser"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeleteUserSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeleteUserErrorResponse
    } else {
      throw e
    }
  }
}

/**
Delete user saved card
*/
export type AxiosDeleteSavedCardSuccessResponse = (AxiosResponse<DeleteSavedCard200ResponseSchema> & { status: 200 })
export type AxiosDeleteSavedCardErrorResponse = ((AxiosResponse<DeleteSavedCard400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeleteSavedCard404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeleteSavedCard405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeleteSavedCard415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeleteSavedCard429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeleteSavedCard500ResponseSchema> & { status: 500 })) & { path: "/v1/user/deleteSavedCard" }
export type AxiosDeleteSavedCardResponse = AxiosDeleteSavedCardSuccessResponse | AxiosDeleteSavedCardErrorResponse
export async function deleteSavedCard(data: DeleteSavedCardRequestSchema, config?: AxiosRequestConfig): Promise<AxiosDeleteSavedCardResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/deleteSavedCard"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeleteSavedCardSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeleteSavedCardErrorResponse
    } else {
      throw e
    }
  }
}

/**
Modify user settings
*/
export type AxiosModifySettingsSuccessResponse = (AxiosResponse<ModifySettings200ResponseSchema> & { status: 200 })
export type AxiosModifySettingsErrorResponse = ((AxiosResponse<ModifySettings400ResponseSchema> & { status: 400 }) | (AxiosResponse<ModifySettings405ResponseSchema> & { status: 405 }) | (AxiosResponse<ModifySettings415ResponseSchema> & { status: 415 }) | (AxiosResponse<ModifySettings429ResponseSchema> & { status: 429 }) | (AxiosResponse<ModifySettings500ResponseSchema> & { status: 500 })) & { path: "/v1/user/modifySettings" }
export type AxiosModifySettingsResponse = AxiosModifySettingsSuccessResponse | AxiosModifySettingsErrorResponse
export async function modifySettings(data: ModifySettingsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosModifySettingsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/modifySettings"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosModifySettingsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosModifySettingsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Change the password of the user
*/
export type AxiosChangePasswordSuccessResponse = (AxiosResponse<ChangePassword200ResponseSchema> & { status: 200 })
export type AxiosChangePasswordErrorResponse = ((AxiosResponse<ChangePassword400ResponseSchema> & { status: 400 }) | (AxiosResponse<ChangePassword401ResponseSchema> & { status: 401 }) | (AxiosResponse<ChangePassword404ResponseSchema> & { status: 404 }) | (AxiosResponse<ChangePassword405ResponseSchema> & { status: 405 }) | (AxiosResponse<ChangePassword410ResponseSchema> & { status: 410 }) | (AxiosResponse<ChangePassword415ResponseSchema> & { status: 415 }) | (AxiosResponse<ChangePassword429ResponseSchema> & { status: 429 }) | (AxiosResponse<ChangePassword500ResponseSchema> & { status: 500 })) & { path: "/v1/user/changePassword" }
export type AxiosChangePasswordResponse = AxiosChangePasswordSuccessResponse | AxiosChangePasswordErrorResponse
export async function changePassword(data: ChangePasswordRequestSchema, config?: AxiosRequestConfig): Promise<AxiosChangePasswordResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "ALREADY_EXISTS"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "TOKEN_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/changePassword"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosChangePasswordSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosChangePasswordErrorResponse
    } else {
      throw e
    }
  }
}

/**
Send an email to the user with a link to change the password
*/
export type AxiosSendChangePasswordEmailSuccessResponse = (AxiosResponse<SendChangePasswordEmail200ResponseSchema> & { status: 200 })
export type AxiosSendChangePasswordEmailErrorResponse = ((AxiosResponse<SendChangePasswordEmail400ResponseSchema> & { status: 400 }) | (AxiosResponse<SendChangePasswordEmail404ResponseSchema> & { status: 404 }) | (AxiosResponse<SendChangePasswordEmail405ResponseSchema> & { status: 405 }) | (AxiosResponse<SendChangePasswordEmail415ResponseSchema> & { status: 415 }) | (AxiosResponse<SendChangePasswordEmail429ResponseSchema> & { status: 429 }) | (AxiosResponse<SendChangePasswordEmail500ResponseSchema> & { status: 500 })) & { path: "/v1/user/sendChangePasswordEmail" }
export type AxiosSendChangePasswordEmailResponse = AxiosSendChangePasswordEmailSuccessResponse | AxiosSendChangePasswordEmailErrorResponse
export async function sendChangePasswordEmail(data: SendChangePasswordEmailRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSendChangePasswordEmailResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/sendChangePasswordEmail"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSendChangePasswordEmailSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSendChangePasswordEmailErrorResponse
    } else {
      throw e
    }
  }
}

/**
Check the token to change the password
*/
export type AxiosCheckChangePasswordTokenSuccessResponse = (AxiosResponse<CheckChangePasswordToken200ResponseSchema> & { status: 200 })
export type AxiosCheckChangePasswordTokenErrorResponse = ((AxiosResponse<CheckChangePasswordToken400ResponseSchema> & { status: 400 }) | (AxiosResponse<CheckChangePasswordToken401ResponseSchema> & { status: 401 }) | (AxiosResponse<CheckChangePasswordToken404ResponseSchema> & { status: 404 }) | (AxiosResponse<CheckChangePasswordToken405ResponseSchema> & { status: 405 }) | (AxiosResponse<CheckChangePasswordToken410ResponseSchema> & { status: 410 }) | (AxiosResponse<CheckChangePasswordToken415ResponseSchema> & { status: 415 }) | (AxiosResponse<CheckChangePasswordToken429ResponseSchema> & { status: 429 }) | (AxiosResponse<CheckChangePasswordToken500ResponseSchema> & { status: 500 })) & { path: "/v1/user/checkChangePasswordToken" }
export type AxiosCheckChangePasswordTokenResponse = AxiosCheckChangePasswordTokenSuccessResponse | AxiosCheckChangePasswordTokenErrorResponse
export async function checkChangePasswordToken(data: CheckChangePasswordTokenRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCheckChangePasswordTokenResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "INVALID TOKEN"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "TOKEN_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/checkChangePasswordToken"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCheckChangePasswordTokenSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCheckChangePasswordTokenErrorResponse
    } else {
      throw e
    }
  }
}

/**
Return list of user communications
*/
export type AxiosGetUserCommunicationsSuccessResponse = (AxiosResponse<GetUserCommunications200ResponseSchema> & { status: 200 })
export type AxiosGetUserCommunicationsErrorResponse = ((AxiosResponse<GetUserCommunications400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetUserCommunications404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetUserCommunications405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetUserCommunications415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetUserCommunications429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetUserCommunications500ResponseSchema> & { status: 500 })) & { path: "/v1/user/getUserCommunications" }
export type AxiosGetUserCommunicationsResponse = AxiosGetUserCommunicationsSuccessResponse | AxiosGetUserCommunicationsErrorResponse
export async function getUserCommunications(data: GetUserCommunicationsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetUserCommunicationsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/getUserCommunications"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetUserCommunicationsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetUserCommunicationsErrorResponse
    } else {
      throw e
    }
  }
}

/**
logout the user
*/
export type AxiosLogoutSuccessResponse = (AxiosResponse<Logout200ResponseSchema> & { status: 200 })
export type AxiosLogoutErrorResponse = ((AxiosResponse<Logout400ResponseSchema> & { status: 400 }) | (AxiosResponse<Logout401ResponseSchema> & { status: 401 }) | (AxiosResponse<Logout405ResponseSchema> & { status: 405 }) | (AxiosResponse<Logout415ResponseSchema> & { status: 415 }) | (AxiosResponse<Logout429ResponseSchema> & { status: 429 }) | (AxiosResponse<Logout500ResponseSchema> & { status: 500 })) & { path: "/v1/user/logout" }
export type AxiosLogoutResponse = AxiosLogoutSuccessResponse | AxiosLogoutErrorResponse
export async function logout(config?: AxiosRequestConfig): Promise<AxiosLogoutResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/logout"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosLogoutSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosLogoutErrorResponse
    } else {
      throw e
    }
  }
}

/**
Resend the reset password email
*/
export type AxiosResendResetPasswordSuccessResponse = (AxiosResponse<ResendResetPassword200ResponseSchema> & { status: 200 })
export type AxiosResendResetPasswordErrorResponse = ((AxiosResponse<ResendResetPassword400ResponseSchema> & { status: 400 }) | (AxiosResponse<ResendResetPassword404ResponseSchema> & { status: 404 }) | (AxiosResponse<ResendResetPassword405ResponseSchema> & { status: 405 }) | (AxiosResponse<ResendResetPassword415ResponseSchema> & { status: 415 }) | (AxiosResponse<ResendResetPassword429ResponseSchema> & { status: 429 }) | (AxiosResponse<ResendResetPassword500ResponseSchema> & { status: 500 })) & { path: "/v1/user/resendResetPassword" }
export type AxiosResendResetPasswordResponse = AxiosResendResetPasswordSuccessResponse | AxiosResendResetPasswordErrorResponse
export async function resendResetPassword(data: ResendResetPasswordRequestSchema, config?: AxiosRequestConfig): Promise<AxiosResendResetPasswordResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/resendResetPassword"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosResendResetPasswordSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosResendResetPasswordErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get user shipments
*/
export type AxiosGetUserShipmentsSuccessResponse = (AxiosResponse<GetUserShipments200ResponseSchema> & { status: 200 })
export type AxiosGetUserShipmentsErrorResponse = ((AxiosResponse<GetUserShipments400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetUserShipments405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetUserShipments415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetUserShipments429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetUserShipments500ResponseSchema> & { status: 500 })) & { path: "/v1/user/getUserShipments" }
export type AxiosGetUserShipmentsResponse = AxiosGetUserShipmentsSuccessResponse | AxiosGetUserShipmentsErrorResponse
export async function getUserShipments(data: GetUserShipmentsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetUserShipmentsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/getUserShipments"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetUserShipmentsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetUserShipmentsErrorResponse
    } else {
      throw e
    }
  }
}

/**
save luggages package
*/
export type AxiosSaveLuggageSuccessResponse = (AxiosResponse<SaveLuggage200ResponseSchema> & { status: 200 })
export type AxiosSaveLuggageErrorResponse = ((AxiosResponse<SaveLuggage400ResponseSchema> & { status: 400 }) | (AxiosResponse<SaveLuggage401ResponseSchema> & { status: 401 }) | (AxiosResponse<SaveLuggage405ResponseSchema> & { status: 405 }) | (AxiosResponse<SaveLuggage415ResponseSchema> & { status: 415 }) | (AxiosResponse<SaveLuggage429ResponseSchema> & { status: 429 }) | (AxiosResponse<SaveLuggage500ResponseSchema> & { status: 500 })) & { path: "/v1/user/saveLuggage" }
export type AxiosSaveLuggageResponse = AxiosSaveLuggageSuccessResponse | AxiosSaveLuggageErrorResponse
export async function saveLuggage(data: SaveLuggageRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSaveLuggageResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/saveLuggage"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSaveLuggageSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSaveLuggageErrorResponse
    } else {
      throw e
    }
  }
}

/**
get single luggages package
*/
export type AxiosGetSavedLuggageSuccessResponse = (AxiosResponse<GetSavedLuggage200ResponseSchema> & { status: 200 })
export type AxiosGetSavedLuggageErrorResponse = ((AxiosResponse<GetSavedLuggage400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetSavedLuggage401ResponseSchema> & { status: 401 }) | (AxiosResponse<GetSavedLuggage404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetSavedLuggage405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetSavedLuggage415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetSavedLuggage429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetSavedLuggage500ResponseSchema> & { status: 500 })) & { path: "/v1/user/getSavedLuggage" }
export type AxiosGetSavedLuggageResponse = AxiosGetSavedLuggageSuccessResponse | AxiosGetSavedLuggageErrorResponse
export async function getSavedLuggage(data: GetSavedLuggageRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetSavedLuggageResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/getSavedLuggage"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetSavedLuggageSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetSavedLuggageErrorResponse
    } else {
      throw e
    }
  }
}

/**
delete luggages package
*/
export type AxiosDeleteSavedLuggageSuccessResponse = (AxiosResponse<DeleteSavedLuggage200ResponseSchema> & { status: 200 })
export type AxiosDeleteSavedLuggageErrorResponse = ((AxiosResponse<DeleteSavedLuggage400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeleteSavedLuggage404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeleteSavedLuggage405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeleteSavedLuggage415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeleteSavedLuggage429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeleteSavedLuggage500ResponseSchema> & { status: 500 })) & { path: "/v1/user/deleteSavedLuggage" }
export type AxiosDeleteSavedLuggageResponse = AxiosDeleteSavedLuggageSuccessResponse | AxiosDeleteSavedLuggageErrorResponse
export async function deleteSavedLuggage(data: DeleteSavedLuggageRequestSchema, config?: AxiosRequestConfig): Promise<AxiosDeleteSavedLuggageResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/deleteSavedLuggage"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeleteSavedLuggageSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeleteSavedLuggageErrorResponse
    } else {
      throw e
    }
  }
}

/**
Add a company to an already registered user
*/
export type AxiosAddUserCompanySuccessResponse = (AxiosResponse<AddUserCompany200ResponseSchema> & { status: 200 })
export type AxiosAddUserCompanyErrorResponse = ((AxiosResponse<AddUserCompany400ResponseSchema> & { status: 400 }) | (AxiosResponse<AddUserCompany401ResponseSchema> & { status: 401 }) | (AxiosResponse<AddUserCompany405ResponseSchema> & { status: 405 }) | (AxiosResponse<AddUserCompany409ResponseSchema> & { status: 409 }) | (AxiosResponse<AddUserCompany415ResponseSchema> & { status: 415 }) | (AxiosResponse<AddUserCompany429ResponseSchema> & { status: 429 }) | (AxiosResponse<AddUserCompany500ResponseSchema> & { status: 500 })) & { path: "/v1/user/addUserCompany" }
export type AxiosAddUserCompanyResponse = AxiosAddUserCompanySuccessResponse | AxiosAddUserCompanyErrorResponse
export async function addUserCompany(data: AddUserCompanyRequestSchema, config?: AxiosRequestConfig): Promise<AxiosAddUserCompanyResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/user/addUserCompany"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosAddUserCompanySuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosAddUserCompanyErrorResponse
    } else {
      throw e
    }
  }
}

/**
Create a new stripe payment intent from price or shipment details
*/
export type AxiosCreateIntentSuccessResponse = (AxiosResponse<CreateIntent200ResponseSchema> & { status: 200 })
export type AxiosCreateIntentErrorResponse = ((AxiosResponse<CreateIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<CreateIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<CreateIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<CreateIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<CreateIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<CreateIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/createIntent" }
export type AxiosCreateIntentResponse = AxiosCreateIntentSuccessResponse | AxiosCreateIntentErrorResponse
export async function createIntent(data: CreateIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCreateIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/createIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCreateIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCreateIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Update the payment intent
*/
export type AxiosUpdatePaymentIntentSuccessResponse = (AxiosResponse<UpdatePaymentIntent200ResponseSchema> & { status: 200 })
export type AxiosUpdatePaymentIntentErrorResponse = ((AxiosResponse<UpdatePaymentIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<UpdatePaymentIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<UpdatePaymentIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<UpdatePaymentIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<UpdatePaymentIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<UpdatePaymentIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/updatePaymentIntent" }
export type AxiosUpdatePaymentIntentResponse = AxiosUpdatePaymentIntentSuccessResponse | AxiosUpdatePaymentIntentErrorResponse
export async function updatePaymentIntent(data: UpdatePaymentIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosUpdatePaymentIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/updatePaymentIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosUpdatePaymentIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosUpdatePaymentIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Cancel a payment intent
*/
export type AxiosCancelPaymentIntentSuccessResponse = (AxiosResponse<CancelPaymentIntent200ResponseSchema> & { status: 200 })
export type AxiosCancelPaymentIntentErrorResponse = ((AxiosResponse<CancelPaymentIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<CancelPaymentIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<CancelPaymentIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<CancelPaymentIntent409ResponseSchema> & { status: 409 }) | (AxiosResponse<CancelPaymentIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<CancelPaymentIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<CancelPaymentIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/cancelPaymentIntent" }
export type AxiosCancelPaymentIntentResponse = AxiosCancelPaymentIntentSuccessResponse | AxiosCancelPaymentIntentErrorResponse
export async function cancelPaymentIntent(data: CancelPaymentIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCancelPaymentIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/cancelPaymentIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCancelPaymentIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCancelPaymentIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Retrieve information about user payment intent
*/
export type AxiosRetrievePaymentIntentSuccessResponse = (AxiosResponse<RetrievePaymentIntent200ResponseSchema> & { status: 200 })
export type AxiosRetrievePaymentIntentErrorResponse = ((AxiosResponse<RetrievePaymentIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<RetrievePaymentIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<RetrievePaymentIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<RetrievePaymentIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<RetrievePaymentIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<RetrievePaymentIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/retrievePaymentIntent" }
export type AxiosRetrievePaymentIntentResponse = AxiosRetrievePaymentIntentSuccessResponse | AxiosRetrievePaymentIntentErrorResponse
export async function retrievePaymentIntent(data: RetrievePaymentIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosRetrievePaymentIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/retrievePaymentIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosRetrievePaymentIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosRetrievePaymentIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify that a payment intent exists
*/
export type AxiosVerifyPaymentIntentSuccessResponse = (AxiosResponse<VerifyPaymentIntent200ResponseSchema> & { status: 200 })
export type AxiosVerifyPaymentIntentErrorResponse = ((AxiosResponse<VerifyPaymentIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyPaymentIntent403ResponseSchema> & { status: 403 }) | (AxiosResponse<VerifyPaymentIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<VerifyPaymentIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyPaymentIntent409ResponseSchema> & { status: 409 }) | (AxiosResponse<VerifyPaymentIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyPaymentIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyPaymentIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/verifyPaymentIntent" }
export type AxiosVerifyPaymentIntentResponse = AxiosVerifyPaymentIntentSuccessResponse | AxiosVerifyPaymentIntentErrorResponse
export async function verifyPaymentIntent(data: VerifyPaymentIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyPaymentIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "403": {
      "code": [
        "FORBIDDEN"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/verifyPaymentIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyPaymentIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyPaymentIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Capture a payment intent
*/
export type AxiosCapturePaymentIntentSuccessResponse = (AxiosResponse<CapturePaymentIntent200ResponseSchema> & { status: 200 })
export type AxiosCapturePaymentIntentErrorResponse = ((AxiosResponse<CapturePaymentIntent400ResponseSchema> & { status: 400 }) | (AxiosResponse<CapturePaymentIntent404ResponseSchema> & { status: 404 }) | (AxiosResponse<CapturePaymentIntent405ResponseSchema> & { status: 405 }) | (AxiosResponse<CapturePaymentIntent415ResponseSchema> & { status: 415 }) | (AxiosResponse<CapturePaymentIntent429ResponseSchema> & { status: 429 }) | (AxiosResponse<CapturePaymentIntent500ResponseSchema> & { status: 500 })) & { path: "/v1/payments/capturePaymentIntent" }
export type AxiosCapturePaymentIntentResponse = AxiosCapturePaymentIntentSuccessResponse | AxiosCapturePaymentIntentErrorResponse
export async function capturePaymentIntent(data: CapturePaymentIntentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCapturePaymentIntentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/payments/capturePaymentIntent"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCapturePaymentIntentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCapturePaymentIntentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all users in the system
*/
export type AxiosGetUsersSuccessResponse = (AxiosResponse<GetUsers200ResponseSchema> & { status: 200 })
export type AxiosGetUsersErrorResponse = ((AxiosResponse<GetUsers400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetUsers405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetUsers415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetUsers429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetUsers500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/getUsers" }
export type AxiosGetUsersResponse = AxiosGetUsersSuccessResponse | AxiosGetUsersErrorResponse
export async function getUsers(data: GetUsersRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetUsersResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/getUsers"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetUsersSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetUsersErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all help requests in the system
*/
export type AxiosGetHelpRequestsSuccessResponse = (AxiosResponse<GetHelpRequests200ResponseSchema> & { status: 200 })
export type AxiosGetHelpRequestsErrorResponse = ((AxiosResponse<GetHelpRequests400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetHelpRequests405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetHelpRequests415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetHelpRequests429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetHelpRequests500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/getHelpRequests" }
export type AxiosGetHelpRequestsResponse = AxiosGetHelpRequestsSuccessResponse | AxiosGetHelpRequestsErrorResponse
export async function getHelpRequests(data: GetHelpRequestsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetHelpRequestsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/getHelpRequests"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetHelpRequestsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetHelpRequestsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all shipments in the system
*/
export type AxiosAdminGetNormalShipmentsSuccessResponse = (AxiosResponse<AdminGetNormalShipments200ResponseSchema> & { status: 200 })
export type AxiosAdminGetNormalShipmentsErrorResponse = ((AxiosResponse<AdminGetNormalShipments400ResponseSchema> & { status: 400 }) | (AxiosResponse<AdminGetNormalShipments405ResponseSchema> & { status: 405 }) | (AxiosResponse<AdminGetNormalShipments415ResponseSchema> & { status: 415 }) | (AxiosResponse<AdminGetNormalShipments429ResponseSchema> & { status: 429 }) | (AxiosResponse<AdminGetNormalShipments500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/adminGetNormalShipments" }
export type AxiosAdminGetNormalShipmentsResponse = AxiosAdminGetNormalShipmentsSuccessResponse | AxiosAdminGetNormalShipmentsErrorResponse
export async function adminGetNormalShipments(data: AdminGetNormalShipmentsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosAdminGetNormalShipmentsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/adminGetNormalShipments"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosAdminGetNormalShipmentsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosAdminGetNormalShipmentsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all errors in the system
*/
export type AxiosGetErrorsSuccessResponse = (AxiosResponse<GetErrors200ResponseSchema> & { status: 200 })
export type AxiosGetErrorsErrorResponse = ((AxiosResponse<GetErrors400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetErrors405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetErrors415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetErrors429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetErrors500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/getErrors" }
export type AxiosGetErrorsResponse = AxiosGetErrorsSuccessResponse | AxiosGetErrorsErrorResponse
export async function getErrors(data: GetErrorsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetErrorsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/getErrors"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetErrorsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetErrorsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all pending shipments that need to be confirmed
*/
export type AxiosAdminGetPendingShipmentsSuccessResponse = (AxiosResponse<AdminGetPendingShipments200ResponseSchema> & { status: 200 })
export type AxiosAdminGetPendingShipmentsErrorResponse = ((AxiosResponse<AdminGetPendingShipments400ResponseSchema> & { status: 400 }) | (AxiosResponse<AdminGetPendingShipments405ResponseSchema> & { status: 405 }) | (AxiosResponse<AdminGetPendingShipments415ResponseSchema> & { status: 415 }) | (AxiosResponse<AdminGetPendingShipments429ResponseSchema> & { status: 429 }) | (AxiosResponse<AdminGetPendingShipments500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/adminGetPendingShipments" }
export type AxiosAdminGetPendingShipmentsResponse = AxiosAdminGetPendingShipmentsSuccessResponse | AxiosAdminGetPendingShipmentsErrorResponse
export async function adminGetPendingShipments(data: AdminGetPendingShipmentsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosAdminGetPendingShipmentsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/adminGetPendingShipments"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosAdminGetPendingShipmentsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosAdminGetPendingShipmentsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Delete a user session so that the user will have to login again
*/
export type AxiosDeleteUserSessionSuccessResponse = (AxiosResponse<DeleteUserSession200ResponseSchema> & { status: 200 })
export type AxiosDeleteUserSessionErrorResponse = ((AxiosResponse<DeleteUserSession400ResponseSchema> & { status: 400 }) | (AxiosResponse<DeleteUserSession404ResponseSchema> & { status: 404 }) | (AxiosResponse<DeleteUserSession405ResponseSchema> & { status: 405 }) | (AxiosResponse<DeleteUserSession415ResponseSchema> & { status: 415 }) | (AxiosResponse<DeleteUserSession429ResponseSchema> & { status: 429 }) | (AxiosResponse<DeleteUserSession500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/deleteUserSession" }
export type AxiosDeleteUserSessionResponse = AxiosDeleteUserSessionSuccessResponse | AxiosDeleteUserSessionErrorResponse
export async function deleteUserSession(data: DeleteUserSessionRequestSchema, config?: AxiosRequestConfig): Promise<AxiosDeleteUserSessionResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/deleteUserSession"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosDeleteUserSessionSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosDeleteUserSessionErrorResponse
    } else {
      throw e
    }
  }
}

/**
Update a system error status
*/
export type AxiosUpdateErrorSuccessResponse = (AxiosResponse<UpdateError200ResponseSchema> & { status: 200 })
export type AxiosUpdateErrorErrorResponse = ((AxiosResponse<UpdateError400ResponseSchema> & { status: 400 }) | (AxiosResponse<UpdateError404ResponseSchema> & { status: 404 }) | (AxiosResponse<UpdateError405ResponseSchema> & { status: 405 }) | (AxiosResponse<UpdateError415ResponseSchema> & { status: 415 }) | (AxiosResponse<UpdateError429ResponseSchema> & { status: 429 }) | (AxiosResponse<UpdateError500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/updateError" }
export type AxiosUpdateErrorResponse = AxiosUpdateErrorSuccessResponse | AxiosUpdateErrorErrorResponse
export async function updateError(data: UpdateErrorRequestSchema, config?: AxiosRequestConfig): Promise<AxiosUpdateErrorResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/updateError"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosUpdateErrorSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosUpdateErrorErrorResponse
    } else {
      throw e
    }
  }
}

/**
Send help response to a client request
*/
export type AxiosSendHelpResponseSuccessResponse = (AxiosResponse<SendHelpResponse200ResponseSchema> & { status: 200 })
export type AxiosSendHelpResponseErrorResponse = ((AxiosResponse<SendHelpResponse400ResponseSchema> & { status: 400 }) | (AxiosResponse<SendHelpResponse401ResponseSchema> & { status: 401 }) | (AxiosResponse<SendHelpResponse404ResponseSchema> & { status: 404 }) | (AxiosResponse<SendHelpResponse405ResponseSchema> & { status: 405 }) | (AxiosResponse<SendHelpResponse410ResponseSchema> & { status: 410 }) | (AxiosResponse<SendHelpResponse415ResponseSchema> & { status: 415 }) | (AxiosResponse<SendHelpResponse429ResponseSchema> & { status: 429 }) | (AxiosResponse<SendHelpResponse500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/sendHelpResponse" }
export type AxiosSendHelpResponseResponse = AxiosSendHelpResponseSuccessResponse | AxiosSendHelpResponseErrorResponse
export async function sendHelpResponse(data: SendHelpResponseRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSendHelpResponseResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/sendHelpResponse"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSendHelpResponseSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSendHelpResponseErrorResponse
    } else {
      throw e
    }
  }
}

/**
Reject a pending travel
*/
export type AxiosRejectPendingShipmentSuccessResponse = (AxiosResponse<RejectPendingShipment200ResponseSchema> & { status: 200 })
export type AxiosRejectPendingShipmentErrorResponse = ((AxiosResponse<RejectPendingShipment400ResponseSchema> & { status: 400 }) | (AxiosResponse<RejectPendingShipment404ResponseSchema> & { status: 404 }) | (AxiosResponse<RejectPendingShipment405ResponseSchema> & { status: 405 }) | (AxiosResponse<RejectPendingShipment415ResponseSchema> & { status: 415 }) | (AxiosResponse<RejectPendingShipment429ResponseSchema> & { status: 429 }) | (AxiosResponse<RejectPendingShipment500ResponseSchema> & { status: 500 })) & { path: "/v1/admin/rejectPendingShipment" }
export type AxiosRejectPendingShipmentResponse = AxiosRejectPendingShipmentSuccessResponse | AxiosRejectPendingShipmentErrorResponse
export async function rejectPendingShipment(data: RejectPendingShipmentRequestSchema, config?: AxiosRequestConfig): Promise<AxiosRejectPendingShipmentResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/admin/rejectPendingShipment"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosRejectPendingShipmentSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosRejectPendingShipmentErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify user credentials
*/
export type AxiosVerifyUserCredentialsSuccessResponse = (AxiosResponse<VerifyUserCredentials200ResponseSchema> & { status: 200 })
export type AxiosVerifyUserCredentialsErrorResponse = ((AxiosResponse<VerifyUserCredentials400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyUserCredentials404ResponseSchema> & { status: 404 }) | (AxiosResponse<VerifyUserCredentials405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyUserCredentials415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyUserCredentials429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyUserCredentials500ResponseSchema> & { status: 500 })) & { path: "/v1/auth/verifyUserCredentials" }
export type AxiosVerifyUserCredentialsResponse = AxiosVerifyUserCredentialsSuccessResponse | AxiosVerifyUserCredentialsErrorResponse
export async function verifyUserCredentials(data: VerifyUserCredentialsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyUserCredentialsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/auth/verifyUserCredentials"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyUserCredentialsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyUserCredentialsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify email token
*/
export type AxiosVerifyEmailTokenSuccessResponse = (AxiosResponse<VerifyEmailToken200ResponseSchema> & { status: 200 })
export type AxiosVerifyEmailTokenErrorResponse = ((AxiosResponse<VerifyEmailToken400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyEmailToken404ResponseSchema> & { status: 404 }) | (AxiosResponse<VerifyEmailToken405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyEmailToken410ResponseSchema> & { status: 410 }) | (AxiosResponse<VerifyEmailToken415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyEmailToken429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyEmailToken500ResponseSchema> & { status: 500 })) & { path: "/v1/auth/verifyEmailToken" }
export type AxiosVerifyEmailTokenResponse = AxiosVerifyEmailTokenSuccessResponse | AxiosVerifyEmailTokenErrorResponse
export async function verifyEmailToken(data: VerifyEmailTokenRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyEmailTokenResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "TOKEN_EXPIRED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "TOKEN_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/auth/verifyEmailToken"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyEmailTokenSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyEmailTokenErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify the user authentication
*/
export type AxiosVerifyAuthenticationSuccessResponse = (AxiosResponse<VerifyAuthentication200ResponseSchema> & { status: 200 })
export type AxiosVerifyAuthenticationErrorResponse = ((AxiosResponse<VerifyAuthentication400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyAuthentication401ResponseSchema> & { status: 401 }) | (AxiosResponse<VerifyAuthentication405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyAuthentication415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyAuthentication429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyAuthentication500ResponseSchema> & { status: 500 })) & { path: "/v1/auth/verifyAuthentication" }
export type AxiosVerifyAuthenticationResponse = AxiosVerifyAuthenticationSuccessResponse | AxiosVerifyAuthenticationErrorResponse
export async function verifyAuthentication(config?: AxiosRequestConfig): Promise<AxiosVerifyAuthenticationResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/auth/verifyAuthentication"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyAuthenticationSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyAuthenticationErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify that the authenticated user is an admin
*/
export type AxiosVerifyAssistantSuccessResponse = (AxiosResponse<VerifyAssistant200ResponseSchema> & { status: 200 })
export type AxiosVerifyAssistantErrorResponse = ((AxiosResponse<VerifyAssistant400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyAssistant403ResponseSchema> & { status: 403 }) | (AxiosResponse<VerifyAssistant405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyAssistant415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyAssistant429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyAssistant500ResponseSchema> & { status: 500 })) & { path: "/v1/auth/verifyAssistant" }
export type AxiosVerifyAssistantResponse = AxiosVerifyAssistantSuccessResponse | AxiosVerifyAssistantErrorResponse
export async function verifyAssistant(config?: AxiosRequestConfig): Promise<AxiosVerifyAssistantResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "403": {
      "code": [
        "FORBIDDEN"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/auth/verifyAssistant"), null, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyAssistantSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyAssistantErrorResponse
    } else {
      throw e
    }
  }
}

/**
Check if phone number is already in use or not
*/
export type AxiosIsPhoneUniqueSuccessResponse = (AxiosResponse<IsPhoneUnique200ResponseSchema> & { status: 200 })
export type AxiosIsPhoneUniqueErrorResponse = ((AxiosResponse<IsPhoneUnique400ResponseSchema> & { status: 400 }) | (AxiosResponse<IsPhoneUnique405ResponseSchema> & { status: 405 }) | (AxiosResponse<IsPhoneUnique415ResponseSchema> & { status: 415 }) | (AxiosResponse<IsPhoneUnique429ResponseSchema> & { status: 429 }) | (AxiosResponse<IsPhoneUnique500ResponseSchema> & { status: 500 })) & { path: "/v1/auth/isPhoneUnique" }
export type AxiosIsPhoneUniqueResponse = AxiosIsPhoneUniqueSuccessResponse | AxiosIsPhoneUniqueErrorResponse
export async function isPhoneUnique(data: IsPhoneUniqueRequestSchema, config?: AxiosRequestConfig): Promise<AxiosIsPhoneUniqueResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/auth/isPhoneUnique"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosIsPhoneUniqueSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosIsPhoneUniqueErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get available accomodations basic information
*/
export type AxiosGetAvailableAccomodationsSuccessResponse = (AxiosResponse<GetAvailableAccomodations200ResponseSchema> & { status: 200 })
export type AxiosGetAvailableAccomodationsErrorResponse = ((AxiosResponse<GetAvailableAccomodations400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetAvailableAccomodations404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetAvailableAccomodations405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetAvailableAccomodations415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetAvailableAccomodations429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetAvailableAccomodations500ResponseSchema> & { status: 500 })) & { path: "/v1/accomodations/getAvailableAccomodations" }
export type AxiosGetAvailableAccomodationsResponse = AxiosGetAvailableAccomodationsSuccessResponse | AxiosGetAvailableAccomodationsErrorResponse
export async function getAvailableAccomodations(data: GetAvailableAccomodationsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetAvailableAccomodationsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/accomodations/getAvailableAccomodations"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetAvailableAccomodationsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetAvailableAccomodationsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get accomodation details
*/
export type AxiosGetAccomodationDetailsSuccessResponse = (AxiosResponse<GetAccomodationDetails200ResponseSchema> & { status: 200 })
export type AxiosGetAccomodationDetailsErrorResponse = ((AxiosResponse<GetAccomodationDetails400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetAccomodationDetails404ResponseSchema> & { status: 404 }) | (AxiosResponse<GetAccomodationDetails405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetAccomodationDetails415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetAccomodationDetails429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetAccomodationDetails500ResponseSchema> & { status: 500 })) & { path: "/v1/accomodations/getAccomodationDetails" }
export type AxiosGetAccomodationDetailsResponse = AxiosGetAccomodationDetailsSuccessResponse | AxiosGetAccomodationDetailsErrorResponse
export async function getAccomodationDetails(data: GetAccomodationDetailsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetAccomodationDetailsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/accomodations/getAccomodationDetails"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetAccomodationDetailsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetAccomodationDetailsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all the constants needed for the accomodations
*/
export type AxiosGetConstantsSuccessResponse = (AxiosResponse<GetConstants200ResponseSchema> & { status: 200 })
export type AxiosGetConstantsErrorResponse = ((AxiosResponse<GetConstants400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetConstants405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetConstants415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetConstants429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetConstants500ResponseSchema> & { status: 500 })) & { path: "/v1/accomodations/getConstants" }
export type AxiosGetConstantsResponse = AxiosGetConstantsSuccessResponse | AxiosGetConstantsErrorResponse
export async function getConstants(data: GetConstantsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetConstantsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/accomodations/getConstants"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetConstantsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetConstantsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get the best accomodations
*/
export type AxiosGetBestAccomodationsSuccessResponse = (AxiosResponse<GetBestAccomodations200ResponseSchema> & { status: 200 })
export type AxiosGetBestAccomodationsErrorResponse = ((AxiosResponse<GetBestAccomodations400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetBestAccomodations405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetBestAccomodations415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetBestAccomodations429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetBestAccomodations500ResponseSchema> & { status: 500 })) & { path: "/v1/accomodations/getBestAccomodations" }
export type AxiosGetBestAccomodationsResponse = AxiosGetBestAccomodationsSuccessResponse | AxiosGetBestAccomodationsErrorResponse
export async function getBestAccomodations(data: GetBestAccomodationsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetBestAccomodationsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/accomodations/getBestAccomodations"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetBestAccomodationsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetBestAccomodationsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Send assistance request
*/
export type AxiosSendGeneralHelpRequestSuccessResponse = (AxiosResponse<SendGeneralHelpRequest200ResponseSchema> & { status: 200 })
export type AxiosSendGeneralHelpRequestErrorResponse = ((AxiosResponse<SendGeneralHelpRequest400ResponseSchema> & { status: 400 }) | (AxiosResponse<SendGeneralHelpRequest405ResponseSchema> & { status: 405 }) | (AxiosResponse<SendGeneralHelpRequest415ResponseSchema> & { status: 415 }) | (AxiosResponse<SendGeneralHelpRequest429ResponseSchema> & { status: 429 }) | (AxiosResponse<SendGeneralHelpRequest500ResponseSchema> & { status: 500 })) & { path: "/v1/assistance/sendGeneralHelpRequest" }
export type AxiosSendGeneralHelpRequestResponse = AxiosSendGeneralHelpRequestSuccessResponse | AxiosSendGeneralHelpRequestErrorResponse
export async function sendGeneralHelpRequest(data: SendGeneralHelpRequestRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSendGeneralHelpRequestResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/assistance/sendGeneralHelpRequest"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSendGeneralHelpRequestSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSendGeneralHelpRequestErrorResponse
    } else {
      throw e
    }
  }
}

/**
Send a help request to the assistance page
*/
export type AxiosSendHelpRequestSuccessResponse = (AxiosResponse<SendHelpRequest200ResponseSchema> & { status: 200 })
export type AxiosSendHelpRequestErrorResponse = ((AxiosResponse<SendHelpRequest400ResponseSchema> & { status: 400 }) | (AxiosResponse<SendHelpRequest405ResponseSchema> & { status: 405 }) | (AxiosResponse<SendHelpRequest415ResponseSchema> & { status: 415 }) | (AxiosResponse<SendHelpRequest429ResponseSchema> & { status: 429 }) | (AxiosResponse<SendHelpRequest500ResponseSchema> & { status: 500 })) & { path: "/v1/assistance/sendHelpRequest" }
export type AxiosSendHelpRequestResponse = AxiosSendHelpRequestSuccessResponse | AxiosSendHelpRequestErrorResponse
export async function sendHelpRequest(data: SendHelpRequestRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSendHelpRequestResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/assistance/sendHelpRequest"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSendHelpRequestSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSendHelpRequestErrorResponse
    } else {
      throw e
    }
  }
}

/**
Try to accept a help request in order to help the user
*/
export type AxiosAcceptHelpRequestSuccessResponse = (AxiosResponse<AcceptHelpRequest200ResponseSchema> & { status: 200 })
export type AxiosAcceptHelpRequestErrorResponse = ((AxiosResponse<AcceptHelpRequest400ResponseSchema> & { status: 400 }) | (AxiosResponse<AcceptHelpRequest401ResponseSchema> & { status: 401 }) | (AxiosResponse<AcceptHelpRequest403ResponseSchema> & { status: 403 }) | (AxiosResponse<AcceptHelpRequest404ResponseSchema> & { status: 404 }) | (AxiosResponse<AcceptHelpRequest405ResponseSchema> & { status: 405 }) | (AxiosResponse<AcceptHelpRequest409ResponseSchema> & { status: 409 }) | (AxiosResponse<AcceptHelpRequest415ResponseSchema> & { status: 415 }) | (AxiosResponse<AcceptHelpRequest429ResponseSchema> & { status: 429 }) | (AxiosResponse<AcceptHelpRequest500ResponseSchema> & { status: 500 })) & { path: "/v1/assistance/acceptHelpRequest" }
export type AxiosAcceptHelpRequestResponse = AxiosAcceptHelpRequestSuccessResponse | AxiosAcceptHelpRequestErrorResponse
export async function acceptHelpRequest(data: AcceptHelpRequestRequestSchema, config?: AxiosRequestConfig): Promise<AxiosAcceptHelpRequestResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "403": {
      "code": [
        "FORBIDDEN"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "CONFLICT"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/assistance/acceptHelpRequest"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosAcceptHelpRequestSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosAcceptHelpRequestErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all the assistance requests send by a specific user
*/
export type AxiosGetAssistanceRequestSuccessResponse = (AxiosResponse<GetAssistanceRequest200ResponseSchema> & { status: 200 })
export type AxiosGetAssistanceRequestErrorResponse = ((AxiosResponse<GetAssistanceRequest400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetAssistanceRequest401ResponseSchema> & { status: 401 }) | (AxiosResponse<GetAssistanceRequest405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetAssistanceRequest415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetAssistanceRequest429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetAssistanceRequest500ResponseSchema> & { status: 500 })) & { path: "/v1/assistance/getAssistanceRequest" }
export type AxiosGetAssistanceRequestResponse = AxiosGetAssistanceRequestSuccessResponse | AxiosGetAssistanceRequestErrorResponse
export async function getAssistanceRequest(data: GetAssistanceRequestRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetAssistanceRequestResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/assistance/getAssistanceRequest"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetAssistanceRequestSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetAssistanceRequestErrorResponse
    } else {
      throw e
    }
  }
}

/**
Check if an email is unique
*/
export type AxiosVerifyUserUniquenessSuccessResponse = (AxiosResponse<VerifyUserUniqueness200ResponseSchema> & { status: 200 })
export type AxiosVerifyUserUniquenessErrorResponse = ((AxiosResponse<VerifyUserUniqueness400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyUserUniqueness405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyUserUniqueness415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyUserUniqueness429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyUserUniqueness500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/verifyUserUniqueness" }
export type AxiosVerifyUserUniquenessResponse = AxiosVerifyUserUniquenessSuccessResponse | AxiosVerifyUserUniquenessErrorResponse
export async function verifyUserUniqueness(data: VerifyUserUniquenessRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyUserUniquenessResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/verifyUserUniqueness"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyUserUniquenessSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyUserUniquenessErrorResponse
    } else {
      throw e
    }
  }
}

/**
Save a new signup session in the database
*/
export type AxiosSaveSignupSuccessResponse = (AxiosResponse<SaveSignup200ResponseSchema> & { status: 200 })
export type AxiosSaveSignupErrorResponse = ((AxiosResponse<SaveSignup400ResponseSchema> & { status: 400 }) | (AxiosResponse<SaveSignup405ResponseSchema> & { status: 405 }) | (AxiosResponse<SaveSignup415ResponseSchema> & { status: 415 }) | (AxiosResponse<SaveSignup429ResponseSchema> & { status: 429 }) | (AxiosResponse<SaveSignup500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/saveSignup" }
export type AxiosSaveSignupResponse = AxiosSaveSignupSuccessResponse | AxiosSaveSignupErrorResponse
export async function saveSignup(data: SaveSignupRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSaveSignupResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/saveSignup"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSaveSignupSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSaveSignupErrorResponse
    } else {
      throw e
    }
  }
}

/**
send confirm code
*/
export type AxiosSendEmailConfirmationCodeSuccessResponse = (AxiosResponse<SendEmailConfirmationCode200ResponseSchema> & { status: 200 })
export type AxiosSendEmailConfirmationCodeErrorResponse = ((AxiosResponse<SendEmailConfirmationCode400ResponseSchema> & { status: 400 }) | (AxiosResponse<SendEmailConfirmationCode404ResponseSchema> & { status: 404 }) | (AxiosResponse<SendEmailConfirmationCode405ResponseSchema> & { status: 405 }) | (AxiosResponse<SendEmailConfirmationCode410ResponseSchema> & { status: 410 }) | (AxiosResponse<SendEmailConfirmationCode415ResponseSchema> & { status: 415 }) | (AxiosResponse<SendEmailConfirmationCode429ResponseSchema> & { status: 429 }) | (AxiosResponse<SendEmailConfirmationCode500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/sendEmailConfirmationCode" }
export type AxiosSendEmailConfirmationCodeResponse = AxiosSendEmailConfirmationCodeSuccessResponse | AxiosSendEmailConfirmationCodeErrorResponse
export async function sendEmailConfirmationCode(data: SendEmailConfirmationCodeRequestSchema, config?: AxiosRequestConfig): Promise<AxiosSendEmailConfirmationCodeResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "SESSION EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/sendEmailConfirmationCode"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosSendEmailConfirmationCodeSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosSendEmailConfirmationCodeErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify email confirmation code token
*/
export type AxiosVerifyEmailCodeTokenSuccessResponse = (AxiosResponse<VerifyEmailCodeToken200ResponseSchema> & { status: 200 })
export type AxiosVerifyEmailCodeTokenErrorResponse = ((AxiosResponse<VerifyEmailCodeToken400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyEmailCodeToken401ResponseSchema> & { status: 401 }) | (AxiosResponse<VerifyEmailCodeToken405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyEmailCodeToken410ResponseSchema> & { status: 410 }) | (AxiosResponse<VerifyEmailCodeToken415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyEmailCodeToken429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyEmailCodeToken500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/verifyEmailCodeToken" }
export type AxiosVerifyEmailCodeTokenResponse = AxiosVerifyEmailCodeTokenSuccessResponse | AxiosVerifyEmailCodeTokenErrorResponse
export async function verifyEmailCodeToken(data: VerifyEmailCodeTokenRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyEmailCodeTokenResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "INVALID TOKEN"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "TOKEN_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/verifyEmailCodeToken"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyEmailCodeTokenSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyEmailCodeTokenErrorResponse
    } else {
      throw e
    }
  }
}

/**
check confirm code
*/
export type AxiosVerifyEmailConfirmationCodeSuccessResponse = (AxiosResponse<VerifyEmailConfirmationCode200ResponseSchema> & { status: 200 })
export type AxiosVerifyEmailConfirmationCodeErrorResponse = ((AxiosResponse<VerifyEmailConfirmationCode400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyEmailConfirmationCode401ResponseSchema> & { status: 401 }) | (AxiosResponse<VerifyEmailConfirmationCode405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyEmailConfirmationCode410ResponseSchema> & { status: 410 }) | (AxiosResponse<VerifyEmailConfirmationCode415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyEmailConfirmationCode429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyEmailConfirmationCode500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/verifyEmailConfirmationCode" }
export type AxiosVerifyEmailConfirmationCodeResponse = AxiosVerifyEmailConfirmationCodeSuccessResponse | AxiosVerifyEmailConfirmationCodeErrorResponse
export async function verifyEmailConfirmationCode(data: VerifyEmailConfirmationCodeRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyEmailConfirmationCodeResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "INVALID_CODE",
        "UNAUTHORIZED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "SESSION EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/verifyEmailConfirmationCode"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyEmailConfirmationCodeSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyEmailConfirmationCodeErrorResponse
    } else {
      throw e
    }
  }
}

/**
Create a new user
*/
export type AxiosCreateUserSuccessResponse = (AxiosResponse<CreateUser200ResponseSchema> & { status: 200 })
export type AxiosCreateUserErrorResponse = ((AxiosResponse<CreateUser400ResponseSchema> & { status: 400 }) | (AxiosResponse<CreateUser405ResponseSchema> & { status: 405 }) | (AxiosResponse<CreateUser409ResponseSchema> & { status: 409 }) | (AxiosResponse<CreateUser415ResponseSchema> & { status: 415 }) | (AxiosResponse<CreateUser429ResponseSchema> & { status: 429 }) | (AxiosResponse<CreateUser500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/createUser" }
export type AxiosCreateUserResponse = AxiosCreateUserSuccessResponse | AxiosCreateUserErrorResponse
export async function createUser(data: CreateUserRequestSchema, config?: AxiosRequestConfig): Promise<AxiosCreateUserResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "409": {
      "code": [
        "ALREADY_EXISTS"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/createUser"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosCreateUserSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosCreateUserErrorResponse
    } else {
      throw e
    }
  }
}

/**
Valiadate VAT code with vies api
*/
export type AxiosValidateVatSuccessResponse = (AxiosResponse<ValidateVat200ResponseSchema> & { status: 200 })
export type AxiosValidateVatErrorResponse = ((AxiosResponse<ValidateVat400ResponseSchema> & { status: 400 }) | (AxiosResponse<ValidateVat405ResponseSchema> & { status: 405 }) | (AxiosResponse<ValidateVat415ResponseSchema> & { status: 415 }) | (AxiosResponse<ValidateVat429ResponseSchema> & { status: 429 }) | (AxiosResponse<ValidateVat500ResponseSchema> & { status: 500 })) & { path: "/v1/signup/validateVat" }
export type AxiosValidateVatResponse = AxiosValidateVatSuccessResponse | AxiosValidateVatErrorResponse
export async function validateVat(data: ValidateVatRequestSchema, config?: AxiosRequestConfig): Promise<AxiosValidateVatResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/signup/validateVat"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosValidateVatSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosValidateVatErrorResponse
    } else {
      throw e
    }
  }
}

/**
Admin authentication for using the staging environment
*/
export type AxiosAuthAdminSuccessResponse = (AxiosResponse<AuthAdmin200ResponseSchema> & { status: 200 })
export type AxiosAuthAdminErrorResponse = ((AxiosResponse<AuthAdmin400ResponseSchema> & { status: 400 }) | (AxiosResponse<AuthAdmin401ResponseSchema> & { status: 401 }) | (AxiosResponse<AuthAdmin405ResponseSchema> & { status: 405 }) | (AxiosResponse<AuthAdmin415ResponseSchema> & { status: 415 }) | (AxiosResponse<AuthAdmin429ResponseSchema> & { status: 429 }) | (AxiosResponse<AuthAdmin500ResponseSchema> & { status: 500 })) & { path: "/v1/staging/authAdmin" }
export type AxiosAuthAdminResponse = AxiosAuthAdminSuccessResponse | AxiosAuthAdminErrorResponse
export async function authAdmin(data: AuthAdminRequestSchema, config?: AxiosRequestConfig): Promise<AxiosAuthAdminResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/staging/authAdmin"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosAuthAdminSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosAuthAdminErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify the staging token
*/
export type AxiosVerifyStagingTokenSuccessResponse = (AxiosResponse<VerifyStagingToken200ResponseSchema> & { status: 200 })
export type AxiosVerifyStagingTokenErrorResponse = ((AxiosResponse<VerifyStagingToken400ResponseSchema> & { status: 400 }) | (AxiosResponse<VerifyStagingToken401ResponseSchema> & { status: 401 }) | (AxiosResponse<VerifyStagingToken405ResponseSchema> & { status: 405 }) | (AxiosResponse<VerifyStagingToken415ResponseSchema> & { status: 415 }) | (AxiosResponse<VerifyStagingToken429ResponseSchema> & { status: 429 }) | (AxiosResponse<VerifyStagingToken500ResponseSchema> & { status: 500 })) & { path: "/v1/staging/verifyStagingToken" }
export type AxiosVerifyStagingTokenResponse = AxiosVerifyStagingTokenSuccessResponse | AxiosVerifyStagingTokenErrorResponse
export async function verifyStagingToken(data: VerifyStagingTokenRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerifyStagingTokenResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/staging/verifyStagingToken"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerifyStagingTokenSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerifyStagingTokenErrorResponse
    } else {
      throw e
    }
  }
}

/**
get all available cities with filters
*/
export type AxiosGetCitiesSuccessResponse = (AxiosResponse<GetCities200ResponseSchema> & { status: 200 })
export type AxiosGetCitiesErrorResponse = ((AxiosResponse<GetCities400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetCities405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetCities415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetCities429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetCities500ResponseSchema> & { status: 500 })) & { path: "/v1/cities/getCities" }
export type AxiosGetCitiesResponse = AxiosGetCitiesSuccessResponse | AxiosGetCitiesErrorResponse
export async function getCities(data: GetCitiesRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetCitiesResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/cities/getCities"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetCitiesSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetCitiesErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify the code sent via email
*/
export type AxiosVerify2FaCodeSuccessResponse = (AxiosResponse<Verify2FaCode200ResponseSchema> & { status: 200 })
export type AxiosVerify2FaCodeErrorResponse = ((AxiosResponse<Verify2FaCode400ResponseSchema> & { status: 400 }) | (AxiosResponse<Verify2FaCode401ResponseSchema> & { status: 401 }) | (AxiosResponse<Verify2FaCode404ResponseSchema> & { status: 404 }) | (AxiosResponse<Verify2FaCode405ResponseSchema> & { status: 405 }) | (AxiosResponse<Verify2FaCode410ResponseSchema> & { status: 410 }) | (AxiosResponse<Verify2FaCode415ResponseSchema> & { status: 415 }) | (AxiosResponse<Verify2FaCode429ResponseSchema> & { status: 429 }) | (AxiosResponse<Verify2FaCode500ResponseSchema> & { status: 500 })) & { path: "/v1/mfa/verify2FaCode" }
export type AxiosVerify2FaCodeResponse = AxiosVerify2FaCodeSuccessResponse | AxiosVerify2FaCodeErrorResponse
export async function verify2FaCode(data: Verify2FaCodeRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerify2FaCodeResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "INVALID_CODE"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "CODE_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/mfa/verify2FaCode"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerify2FaCodeSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerify2FaCodeErrorResponse
    } else {
      throw e
    }
  }
}

/**
Update an existing user's 2fa code
*/
export type AxiosUpdate2FaCodeSuccessResponse = (AxiosResponse<Update2FaCode200ResponseSchema> & { status: 200 })
export type AxiosUpdate2FaCodeErrorResponse = ((AxiosResponse<Update2FaCode400ResponseSchema> & { status: 400 }) | (AxiosResponse<Update2FaCode404ResponseSchema> & { status: 404 }) | (AxiosResponse<Update2FaCode405ResponseSchema> & { status: 405 }) | (AxiosResponse<Update2FaCode410ResponseSchema> & { status: 410 }) | (AxiosResponse<Update2FaCode415ResponseSchema> & { status: 415 }) | (AxiosResponse<Update2FaCode429ResponseSchema> & { status: 429 }) | (AxiosResponse<Update2FaCode500ResponseSchema> & { status: 500 })) & { path: "/v1/mfa/update2FaCode" }
export type AxiosUpdate2FaCodeResponse = AxiosUpdate2FaCodeSuccessResponse | AxiosUpdate2FaCodeErrorResponse
export async function update2FaCode(data: Update2FaCodeRequestSchema, config?: AxiosRequestConfig): Promise<AxiosUpdate2FaCodeResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "CODE_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/mfa/update2FaCode"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosUpdate2FaCodeSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosUpdate2FaCodeErrorResponse
    } else {
      throw e
    }
  }
}

/**
Verify 2FA ID to check if it exists or not
*/
export type AxiosVerify2FaIdSuccessResponse = (AxiosResponse<Verify2FaId200ResponseSchema> & { status: 200 })
export type AxiosVerify2FaIdErrorResponse = ((AxiosResponse<Verify2FaId400ResponseSchema> & { status: 400 }) | (AxiosResponse<Verify2FaId404ResponseSchema> & { status: 404 }) | (AxiosResponse<Verify2FaId405ResponseSchema> & { status: 405 }) | (AxiosResponse<Verify2FaId415ResponseSchema> & { status: 415 }) | (AxiosResponse<Verify2FaId429ResponseSchema> & { status: 429 }) | (AxiosResponse<Verify2FaId500ResponseSchema> & { status: 500 })) & { path: "/v1/mfa/verify2FaId" }
export type AxiosVerify2FaIdResponse = AxiosVerify2FaIdSuccessResponse | AxiosVerify2FaIdErrorResponse
export async function verify2FaId(data: Verify2FaIdRequestSchema, config?: AxiosRequestConfig): Promise<AxiosVerify2FaIdResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/mfa/verify2FaId"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosVerify2FaIdSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosVerify2FaIdErrorResponse
    } else {
      throw e
    }
  }
}

/**
Update the security settings of the user
*/
export type AxiosUpdateSecuritySettingsSuccessResponse = (AxiosResponse<UpdateSecuritySettings200ResponseSchema> & { status: 200 })
export type AxiosUpdateSecuritySettingsErrorResponse = ((AxiosResponse<UpdateSecuritySettings400ResponseSchema> & { status: 400 }) | (AxiosResponse<UpdateSecuritySettings401ResponseSchema> & { status: 401 }) | (AxiosResponse<UpdateSecuritySettings405ResponseSchema> & { status: 405 }) | (AxiosResponse<UpdateSecuritySettings415ResponseSchema> & { status: 415 }) | (AxiosResponse<UpdateSecuritySettings429ResponseSchema> & { status: 429 }) | (AxiosResponse<UpdateSecuritySettings500ResponseSchema> & { status: 500 })) & { path: "/v1/mfa/updateSecuritySettings" }
export type AxiosUpdateSecuritySettingsResponse = AxiosUpdateSecuritySettingsSuccessResponse | AxiosUpdateSecuritySettingsErrorResponse
export async function updateSecuritySettings(data: UpdateSecuritySettingsRequestSchema, config?: AxiosRequestConfig): Promise<AxiosUpdateSecuritySettingsResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "401": {
      "code": [
        "UNAUTHENTICATED"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/mfa/updateSecuritySettings"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosUpdateSecuritySettingsSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosUpdateSecuritySettingsErrorResponse
    } else {
      throw e
    }
  }
}

/**
Resend 2FA code to verify user
*/
export type AxiosResend2FaCodeSuccessResponse = (AxiosResponse<Resend2FaCode200ResponseSchema> & { status: 200 })
export type AxiosResend2FaCodeErrorResponse = ((AxiosResponse<Resend2FaCode400ResponseSchema> & { status: 400 }) | (AxiosResponse<Resend2FaCode404ResponseSchema> & { status: 404 }) | (AxiosResponse<Resend2FaCode405ResponseSchema> & { status: 405 }) | (AxiosResponse<Resend2FaCode410ResponseSchema> & { status: 410 }) | (AxiosResponse<Resend2FaCode415ResponseSchema> & { status: 415 }) | (AxiosResponse<Resend2FaCode429ResponseSchema> & { status: 429 }) | (AxiosResponse<Resend2FaCode500ResponseSchema> & { status: 500 })) & { path: "/v1/mfa/resend2FaCode" }
export type AxiosResend2FaCodeResponse = AxiosResend2FaCodeSuccessResponse | AxiosResend2FaCodeErrorResponse
export async function resend2FaCode(data: Resend2FaCodeRequestSchema, config?: AxiosRequestConfig): Promise<AxiosResend2FaCodeResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "404": {
      "code": [
        "NOT_FOUND"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "410": {
      "code": [
        "CODE_EXPIRED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/mfa/resend2FaCode"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosResend2FaCodeSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosResend2FaCodeErrorResponse
    } else {
      throw e
    }
  }
}

/**
Get all offers for the current season
*/
export type AxiosGetSeasonOffersSuccessResponse = (AxiosResponse<GetSeasonOffers200ResponseSchema> & { status: 200 })
export type AxiosGetSeasonOffersErrorResponse = ((AxiosResponse<GetSeasonOffers400ResponseSchema> & { status: 400 }) | (AxiosResponse<GetSeasonOffers405ResponseSchema> & { status: 405 }) | (AxiosResponse<GetSeasonOffers415ResponseSchema> & { status: 415 }) | (AxiosResponse<GetSeasonOffers429ResponseSchema> & { status: 429 }) | (AxiosResponse<GetSeasonOffers500ResponseSchema> & { status: 500 })) & { path: "/v1/offers/getSeasonOffers" }
export type AxiosGetSeasonOffersResponse = AxiosGetSeasonOffersSuccessResponse | AxiosGetSeasonOffersErrorResponse
export async function getSeasonOffers(data: GetSeasonOffersRequestSchema, config?: AxiosRequestConfig): Promise<AxiosGetSeasonOffersResponse> {
  _checkSetup()
  const securityParams: AxiosRequestConfig = {}
  const handledResponses = {
    "200": {
      "code": null
    },
    "400": {
      "code": [
        "VALIDATION_ERROR"
      ]
    },
    "405": {
      "code": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "415": {
      "code": [
        "UNSUPPORTED_MEDIA_TYPE"
      ]
    },
    "429": {
      "code": [
        "THROTTLING"
      ]
    },
    "500": {
      "code": [
        "UNEXPECTED_ERROR"
      ]
    }
  }
  try {
    const res = await axios!.post(_getFnUrl("/v1/offers/getSeasonOffers"), data, config ? deepmerge(securityParams, config, { isMergeableObject: isPlainObject }) : securityParams)
    _throwOnUnexpectedResponse(handledResponses, res)
    return res as AxiosGetSeasonOffersSuccessResponse
  } catch (e) {
    const { response: res } = e as AxiosError
    if (res) {
      _throwOnUnexpectedResponse(handledResponses, res)
      return res as AxiosGetSeasonOffersErrorResponse
    } else {
      throw e
    }
  }
}

export type Any =
  | string
  | boolean
  | number
  | {
      [k: string]: unknown
    }
  | string[]
  | number[]
  | {
      [k: string]: unknown
    }[]
  | null

export type ValidationErrorResponseSchema = {
  message: string
  code: "VALIDATION_ERROR"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type MethodNotAllowedErrorResponseSchema = {
  message: string
  code: "METHOD_NOT_ALLOWED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UnsupportedMediaTypeErrorResponseSchema = {
  message: string
  code: "UNSUPPORTED_MEDIA_TYPE"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ForbiddenErrorResponseSchema = {
  message: string
  code: "FORBIDDEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UnauthorizedErrorResponseSchema = {
  message: string
  code: "UNAUTHORIZED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ThrottlingErrorResponseSchema = {
  message: string
  code: "THROTTLING"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UnexpectedErrorResponseSchema = {
  message: string
  code: "UNEXPECTED_ERROR"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type CardCvcSchema = string

export type CardExpirationDateSchema = string

export type CardNumberSchema = string

export type ConfirmUserCodeSchema = string

export type CoordinatesRequestSchema = {
  latitude: number
  longitude: number
  [k: string]: unknown
}

export type CurrencySchema = "eur"

export type DateSchema = string

export type DateTimeSchema = string

export type EmailSchema = string

export type NullableTimestamp = Timestamp | null

export type OkResponseSchema = {
  success: true
}

export type PhoneNumberSchema = {
  number: string
  prefix: string
  [k: string]: unknown
}

export type StrongPasswordSchema = string

export type TimeSchema = string

/**
 * timestamp
 */
export type Timestamp = string

export type UuidSchema = string

export type WebLink = string

export type AlreadyAcceptedHelpRequestErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type AlreadyClosedHelpRequestErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ChangePasswordTokenIsExpiredErrorResponseSchema = {
  message: string
  code: "TOKEN_EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ChangePasswordTOkenNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ConfirmUserPhoneTokenIsExpiredErrorResponseSchema = {
  message: string
  code: "TOKEN_EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ConfirmUserPhoneTokenNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ConflictErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ExpiredRememberTokenErrorResponseSchema = {
  message: string
  code: "TOKEN_EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type ExpiredSession = {
  message: string
  code: "SESSION EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type FiscalCodeAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type GenericForbiddenErrorResponseSchema = {
  message: string
  code: "FORBIDDEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type GenericNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type HelpRequestNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type HotelAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type HotelNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InitSignupInformationConflictResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvalidChangePasswordTokenErrorResponseSchema = {
  message: string
  code: "INVALID TOKEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvalidConfirmEmailCodeTokenErrorResponseSchema = {
  message: string
  code: "INVALID TOKEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvalidConfirmUserCodeErrorResponseSchema = {
  message: string
  code: "INVALID_CODE" | "UNAUTHORIZED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvalidPaymentCardCredentialsErrorResponseSchema = {
  message: string
  code: "INVALID_PAYMENT_CARD_CREDENTIALS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvalidRememberTokenErrorResponseSchema = {
  message: string
  code: "INVALID TOKEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type InvoiceCodeAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type LuggageNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type LuggagesAlreadyDeliveredErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type LuggagesPackageNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type PaymentCardAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type SameOldAndNewPasswordErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type SignupSessionIdExpiredErrorResponseSchema = {
  message: string
  code: "SESSION EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type SessionNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type SignupSessionIdNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type StripePaymentIntentAlreadyCanceledErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type StripePaymentIntentAlreadyCapturedErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type StripePaymentIntentNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type StructureNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type TokenExpiredErrorResponseSchema = {
  message: string
  code: "TOKEN_EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type TokenNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type TooTightDeadlinesErrorResponseSchema = {
  message: string
  code: "TOO_TIGHT_DEADLINE"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type TravelNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UnauthenticatedErrorResponseSchema = {
  message: string
  code: "UNAUTHENTICATED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UnauthorizedUserErrorResponseSchema = {
  message: string
  code: "UNAUTHORIZED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserForbiddenErrorResponseSchema = {
  message: string
  code: "FORBIDDEN"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserHasActiveTravelsErrorResponseSchema = {
  message: string
  code: "CONFLICT"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserNotLoggedErrorResponseSchema = {
  message: string
  code: "UNAUTHENTICATED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type UserSavedCardNotFoundErrorResponseSchema = {
  message: string
  code: "NOT_FOUND"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type VatCodeAlreadyExistsErrorResponseSchema = {
  message: string
  code: "ALREADY_EXISTS"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type VerificationCodeExpiredErrorResponseSchema = {
  message: string
  code: "CODE_EXPIRED"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type WrongVerificationCodeErrorResponseSchema = {
  message: string
  code: "INVALID_CODE"
  details?: Any
  stack?: string
  [k: string]: unknown
}

export type DeleteNormalShipment200ResponseSchema = OkResponseSchema

export type DeleteNormalShipment400ResponseSchema = ValidationErrorResponseSchema

export type DeleteNormalShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type DeleteNormalShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeleteNormalShipment409ResponseSchema = ConflictErrorResponseSchema

export type DeleteNormalShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeleteNormalShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type DeleteNormalShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteNormalShipmentRequestSchema = {
  id: UuidSchema
  removeReturnShipment: boolean
  [k: string]: unknown
}

export type GetNormalShipment200ResponseSchema = GetNormalShipmentResponseSchema[]

export type GetNormalShipment400ResponseSchema = ValidationErrorResponseSchema

export type GetNormalShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetNormalShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetNormalShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetNormalShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type GetNormalShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type GetNormalShipmentRequestSchema = {
  ids?: UuidSchema[]
  [k: string]: unknown
}

export type CreateNormalShipment200ResponseSchema = {
  outwardShipment: SingleCompleteNormalShipmentSchema
  returnShipment?: SingleCompleteNormalShipmentSchema
  [k: string]: unknown
}

export type CreateNormalShipment400ResponseSchema = ValidationErrorResponseSchema

export type CreateNormalShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type CreateNormalShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CreateNormalShipment409ResponseSchema = ConflictErrorResponseSchema

export type CreateNormalShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CreateNormalShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type CreateNormalShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type CreateNormalShipmentRequestSchema =
  | (CreateShipmentSchema & {
      from: "scratch"
      courierId: UuidSchema
      [k: string]: unknown
    } & PaymentIntentSchema)
  | ({
      pendingShipmentId: UuidSchema
      from: "pending"
      [k: string]: unknown
    } & PaymentIntentSchema)

export type CreatePendingShipment200ResponseSchema = {
  outwardShipment: SinglePendingShipmentSchema
  returnShipment?: SinglePendingShipmentSchema
  [k: string]: unknown
}

export type CreatePendingShipment400ResponseSchema = ValidationErrorResponseSchema

export type CreatePendingShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type CreatePendingShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CreatePendingShipment409ResponseSchema = ConflictErrorResponseSchema

export type CreatePendingShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CreatePendingShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type CreatePendingShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type CreatePendingShipmentRequestSchema = CreateShipmentSchema & {
  courierId: UuidSchema
  [k: string]: unknown
} & PaymentIntentSchema

export type GetPendingShipment200ResponseSchema = GetPendingShipmentResponseSchema[]

export type GetPendingShipment400ResponseSchema = ValidationErrorResponseSchema

export type GetPendingShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetPendingShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetPendingShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetPendingShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type GetPendingShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type GetPendingShipmentRequestSchema = {
  ids?: UuidSchema[]
  [k: string]: unknown
}

export type DeletePendingShipment200ResponseSchema = OkResponseSchema

export type DeletePendingShipment400ResponseSchema = ValidationErrorResponseSchema

export type DeletePendingShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type DeletePendingShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeletePendingShipment409ResponseSchema = ConflictErrorResponseSchema

export type DeletePendingShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeletePendingShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type DeletePendingShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type DeletePendingShipmentRequestSchema = {
  id: UuidSchema
  removeReturnShipment: boolean
  [k: string]: unknown
}

export type GetCostEstimate200ResponseSchema = {
  courier: {
    oneWayShipment: CourierSchema
    roundTripShipment?: CourierSchema
    [k: string]: unknown
  }
  outwardShipment: SingleShipmentCostSchema
  returnShipment?: SingleShipmentCostSchema
  [k: string]: unknown
}

export type GetCostEstimate400ResponseSchema = ValidationErrorResponseSchema

export type GetCostEstimate404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetCostEstimate405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetCostEstimate415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetCostEstimate429ResponseSchema = ThrottlingErrorResponseSchema

export type GetCostEstimate500ResponseSchema = UnexpectedErrorResponseSchema

export type GetCostEstimateRequestSchema =
  | {
      courierId?: UuidSchema
      origin: PositionSchema
      destination: PositionSchema
      /**
       * @minItems 1
       */
      luggages: [ShipmentLuggageSchema, ...ShipmentLuggageSchema[]]
      additionals?: AdditionalOptionsSchema
      type: "oneWay"
      [k: string]: unknown
    }
  | {
      courierId?: UuidSchema
      returnCourierId?: UuidSchema
      origin: PositionSchema
      destination: PositionSchema
      /**
       * @minItems 1
       */
      luggages: [ShipmentLuggageSchema, ...ShipmentLuggageSchema[]]
      additionals?: AdditionalOptionsSchema
      type: "roundTrip"
      [k: string]: unknown
    }

export type GetPickupSchedule200ResponseSchema = {
  courier: CourierSchema
  pickupSchedule: DateTimeSchema
  [k: string]: unknown
}

export type GetPickupSchedule400ResponseSchema = ValidationErrorResponseSchema

export type GetPickupSchedule404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetPickupSchedule405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetPickupSchedule415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetPickupSchedule429ResponseSchema = ThrottlingErrorResponseSchema

export type GetPickupSchedule500ResponseSchema = UnexpectedErrorResponseSchema

export type GetPickupScheduleRequestSchema = {
  courierId?: UuidSchema
  origin: PositionSchema
  destination: PositionSchema
  deliverySchedule: DateTimeSchema
  [k: string]: unknown
}

export type GetDeliverySchedule200ResponseSchema = {
  courier: CourierSchema
  deliverySchedule: DateTimeSchema
  [k: string]: unknown
}

export type GetDeliverySchedule400ResponseSchema = ValidationErrorResponseSchema

export type GetDeliverySchedule404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetDeliverySchedule405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetDeliverySchedule415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetDeliverySchedule429ResponseSchema = ThrottlingErrorResponseSchema

export type GetDeliverySchedule500ResponseSchema = UnexpectedErrorResponseSchema

export type GetDeliveryScheduleRequestSchema = {
  courierId?: UuidSchema
  origin: PositionSchema
  destination: PositionSchema
  pickupSchedule: DateTimeSchema
  [k: string]: unknown
}

export type GetGenericShipment200ResponseSchema =
  | (GetPendingShipmentResponseSchema & {
      type: "PENDING"
      [k: string]: unknown
    })
  | (GetNormalShipmentResponseSchema & {
      type: "NORMAL"
      [k: string]: unknown
    })

export type GetGenericShipment400ResponseSchema = ValidationErrorResponseSchema

export type GetGenericShipment401ResponseSchema = UnauthenticatedErrorResponseSchema

export type GetGenericShipment404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetGenericShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetGenericShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetGenericShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type GetGenericShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type GetGenericShipmentRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type GetOptimalCourier200ResponseSchema = {
  courier: {
    oneWayShipment: CourierSchema
    roundTripShipment?: CourierSchema
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type GetOptimalCourier400ResponseSchema = ValidationErrorResponseSchema

export type GetOptimalCourier404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetOptimalCourier405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetOptimalCourier415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetOptimalCourier429ResponseSchema = ThrottlingErrorResponseSchema

export type GetOptimalCourier500ResponseSchema = UnexpectedErrorResponseSchema

export type GetOptimalCourierRequestSchema = {
  origin: PositionSchema
  destination: PositionSchema
  /**
   * @minItems 1
   */
  luggages: [ShipmentLuggageSchema, ...ShipmentLuggageSchema[]]
  type: "oneWay" | "roundTrip"
  [k: string]: unknown
}

export type GetCourierAdditionals200ResponseSchema = {
  optionals: PackagesShipmentPackageOptionalSchema[]
  shipmentOptionals: ShipmentOptionalSchema[]
  insurances: InsuranceSchema[]
  [k: string]: unknown
}

export type GetCourierAdditionals400ResponseSchema = ValidationErrorResponseSchema

export type GetCourierAdditionals404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetCourierAdditionals405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetCourierAdditionals415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetCourierAdditionals429ResponseSchema = ThrottlingErrorResponseSchema

export type GetCourierAdditionals500ResponseSchema = UnexpectedErrorResponseSchema

export type GetCourierAdditionalsRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type GetShipmentOptionals200ResponseSchema = {
  structureCall: ShipmentOptionalSchema
  oneDayCancellation: ShipmentOptionalSchema
  [k: string]: unknown
}

export type GetShipmentOptionals400ResponseSchema = ValidationErrorResponseSchema

export type GetShipmentOptionals405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetShipmentOptionals415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetShipmentOptionals429ResponseSchema = ThrottlingErrorResponseSchema

export type GetShipmentOptionals500ResponseSchema = UnexpectedErrorResponseSchema

export type AdditionalOptionsSchema = {
  courier: CourierAdditionalOptionsSchema
  shipment: number[]
  [k: string]: unknown
}

export type AdditionalPositionSchema = {
  country: string
  city: string
  province: string
  postalCode: string
  coordinates: CoordinatesRequestSchema
  [k: string]: unknown
}

export type CompleteLuggageSchema = {
  weight: number
  weightUnit: "kg"
  height: number
  width: number
  length: number
  dimensionUnit: "cm"
  /**
   * @minItems 1
   */
  content: [LuggageContentSchema, ...LuggageContentSchema[]]
  [k: string]: unknown
}

export type CompletePositionSchema = PositionSchema & GeneralPositionSchema

export type CompletePrivateSchema = PrivatePositionSchema & AdditionalPositionSchema

export type CompletePublicSchema = PublicPositionSchema & AdditionalPositionSchema

export type CostSchema = {
  totalAmount: number
  currency: CurrencySchema
  [k: string]: unknown
}

export type CourierAdditionalOptionsSchema = {
  callBeforeDelivery?: boolean
  saturdayDelivery?: boolean
  expressDelivery?: boolean
  withInsurance?: boolean
  [k: string]: unknown
}

export type CourierSchema = {
  id: UuidSchema
  name: string
  [k: string]: unknown
}

export type CreateShipmentSchema = {
  origin: PositionSchema
  destination: PositionSchema
  /**
   * @minItems 1
   */
  luggages: [ShipmentLuggageSchema, ...ShipmentLuggageSchema[]]
  deliverySchedule: DateTimeSchema
  receiver?: ReceiverSchema
  returnShipment?: ReturnShipmentSchema
  outwardShipmentId?: UuidSchema
  additionalOptions?: AdditionalOptionsSchema
  [k: string]: unknown
}

export type InsuranceSchema = {
  id: UuidSchema
  name: string
  description?: string
  cost: CostSchema
  [k: string]: unknown
}

export type LuggageContentSchema = {
  id: UuidSchema
  name: string
  description?: string
  [k: string]: unknown
}

export type LuggageWithIdSchema = ShipmentLuggageSchema & {
  id: UuidSchema
  [k: string]: unknown
}

export type MinimalPositionSchema = {
  placeId: UuidSchema
  [k: string]: unknown
}

export type PaymentIntentSchema = {
  intentId: string
  [k: string]: unknown
}

export type PositionSchema = PrivatePositionSchema & {
  structureName?: string
  [k: string]: unknown
}

export type PrivatePositionSchema = {
  placeId: UuidSchema
  address: string
  houseNumber: string
  floor?: string
  [k: string]: unknown
}

export type PublicPlaceSchema = {
  id: UuidSchema
  name: string
  [k: string]: unknown
}

export type PublicPositionSchema = {
  type: "public"
  placeId: PublicPlaceSchema
  address: string
  [k: string]: unknown
}

export type ReceiverSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  [k: string]: unknown
}

export type RequestPositionSchema = RequestPublicPositionSchema | PrivatePositionSchema

export type RequestPublicPositionSchema = {
  type: "public"
  placeId: UuidSchema
  address: string
  [k: string]: unknown
}

export type ReturnShipmentSchema = {
  pickupSchedule: DateTimeSchema
  courierId: UuidSchema
  [k: string]: unknown
}

export type ShipmentLuggageSchema = {
  weight: number
  weightUnit: "kg"
  height: number
  width: number
  length: number
  dimensionUnit: "cm"
  /**
   * @minItems 1
   */
  contentIds: [UuidSchema, ...UuidSchema[]]
  [k: string]: unknown
}

export type ShipmentOptionalSchema = {
  id: number
  code: "structureCall" | "oneDayCancellation"
  cost: CostSchema
  [k: string]: unknown
}

export type GetNormalShipmentResponseSchema = {
  outwardShipment: SingleCompleteNormalShipmentSchema
  returnShipment?: SingleCompleteNormalShipmentSchema
  [k: string]: unknown
}

export type ShipmentStatusSchema = {
  id: UuidSchema
  code: string
  description: string
  isCurrent: boolean
  [k: string]: unknown
}

export type SingleCompleteNormalShipmentSchema = {
  id: UuidSchema
  origin: CompletePositionSchema
  destination: CompletePositionSchema
  luggages: CompleteLuggageSchema[]
  pickupSchedule: DateTimeSchema
  deliverySchedule: DateTimeSchema
  trackDetail?: TrackDetailSchema
  cost: CostSchema
  courier: CourierSchema
  receiver?: ReceiverSchema
  statusesDetail: ShipmentStatusSchema[]
  [k: string]: unknown
}

export type SingleNormalShipmentSchema = {
  id: UuidSchema
  origin: CompletePositionSchema
  destination: CompletePositionSchema
  luggages: LuggageWithIdSchema[]
  pickupSchedule: DateTimeSchema
  deliverySchedule: DateTimeSchema
  trackDetail?: TrackDetailSchema
  cost: CostSchema
  courier: CourierSchema
  shipmentType: "PENDING" | "NORMAL"
  receiver?: ReceiverSchema
  [k: string]: unknown
}

export type SingleNormalShipmentWithCourierSchema = SingleNormalShipmentSchema & {
  courierId: UuidSchema
  [k: string]: unknown
}

export type SingleNormalShipmentWithStatusSchema = SingleNormalShipmentSchema & {
  status: ShipmentStatusSchema
  [k: string]: unknown
}

export type TrackDetailSchema = {
  trackId: string
  [k: string]: unknown
}

export type GetPendingShipmentResponseSchema = {
  outwardShipment: SinglePendingShipmentSchema
  returnShipment?: SinglePendingShipmentSchema
  [k: string]: unknown
}

export type SinglePendingShipmentSchema = {
  id: UuidSchema
  origin: CompletePositionSchema
  destination: CompletePositionSchema
  /**
   * @minItems 1
   */
  luggages: [CompleteLuggageSchema, ...CompleteLuggageSchema[]]
  pickupSchedule: DateTimeSchema
  deliverySchedule: DateTimeSchema
  cost: CostSchema
  courier: CourierSchema
  receiver?: ReceiverSchema
  [k: string]: unknown
}

export type SingleShipmentCostSchema = {
  completePrice: CostSchema
  partialCosts: {
    shipment: CostSchema
    courierOptionals: PackagesShipmentPackageOptionalSchema[]
    shipmentOptionals: ShipmentOptionalSchema[]
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type GetLuggagesPackages200ResponseSchema = {
  packages: PackagesSinglePackageSchema[]
  request: {
    origin: PackagePositionSchema
    destination: PackagePositionSchema
    luggages?: PackagesLuggagesWithTypeSchema[]
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type GetLuggagesPackages400ResponseSchema = ValidationErrorResponseSchema

export type GetLuggagesPackages404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetLuggagesPackages405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetLuggagesPackages415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetLuggagesPackages429ResponseSchema = ThrottlingErrorResponseSchema

export type GetLuggagesPackages500ResponseSchema = UnexpectedErrorResponseSchema

export type GetLuggagesPackagesRequestSchema = {
  destination: MinimalPositionSchema
  origin: MinimalPositionSchema
  time: PackagesTimeSchema
  luggages: PackagesLuggageSchema[]
  [k: string]: unknown
}

export type GetHotelOffers200ResponseSchema = SingleOfferSchema[]

export type GetHotelOffers400ResponseSchema = ValidationErrorResponseSchema

export type GetHotelOffers405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetHotelOffers415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetHotelOffers429ResponseSchema = ThrottlingErrorResponseSchema

export type GetHotelOffers500ResponseSchema = UnexpectedErrorResponseSchema

export type GetHotelProducts200ResponseSchema = HotelProductSchema[]

export type GetHotelProducts400ResponseSchema = ValidationErrorResponseSchema

export type GetHotelProducts404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetHotelProducts405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetHotelProducts415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetHotelProducts429ResponseSchema = ThrottlingErrorResponseSchema

export type GetHotelProducts500ResponseSchema = UnexpectedErrorResponseSchema

export type GetHotelProductsRequestSchema = {
  hotelId: string
  checkin: string
  checkout: string
  adults: number
  children: number
  rooms: number
  [k: string]: unknown
}

export type PackagesShipmentPackageOptionalSchema = {
  id: UuidSchema
  code: "CALL_BEFORE_DELIVERY" | "SATURDAY_DELIVERY" | "EXPRESS_DELIVERY" | "INSURANCE"
  name: string
  description: string
  price: PackagesOptionalPriceSchema
  [k: string]: unknown
}

export type HotelProductSchema = {
  occupancy: OccupancySchema
  numberAvailableAtThisPrice: number
  cancellationType: {
    type: "free_cancellation" | "non_refundable" | "special_conditions"
    availableUntil?: string
    [k: string]: unknown
  }
  mealPlan: {
    types?: ("breakfast" | "dinner" | "lunch")[]
    plan: "all_inclusive" | "breakfast_included" | "full_board" | "half_board" | "no_plan"
    [k: string]: unknown
  }
  payment: {
    prePaymentrequired: boolean
    timing: ("pay_at_the_property" | "pay_online_later" | "pay_online_now")[]
    [k: string]: unknown
  }
  totalPrice: string
  room: {
    type: string
    id: string
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type PackagesLuggageSchema = {
  width: number
  height: number
  length: number
  weight: number
  [k: string]: unknown
}

export type PackagesLuggagesWithTypeSchema = PackagesLuggageSchema & {
  type: string
  [k: string]: unknown
}

export type OccupancySchema = {
  adults: number
  children: number
  total: number
  [k: string]: unknown
}

export type PackagesOptionalPriceSchema = {
  price: number
  currency: CurrencySchema
  perKgs?: number
  [k: string]: unknown
}

export type PackagePositionSchema = GeneralPositionSchema

export type PackagesPositionDetailSchema = {
  country: string
  city: string
  cap: string
  [k: string]: unknown
}

export type PackagesPriceSchema = {
  totalCharge: number
  totalDiscount: number
  [k: string]: unknown
}

export type PackagesPrivatePublicPositionSchema = {
  isPrivate: boolean
  id: UuidSchema
  [k: string]: unknown
}

export type SingleOfferSchema = {
  title: string
  placeId: string
  offertId: string
  packagesNuber: number
  basePrice: string
  checkIn: string
  checkOut: string
  rooms: number
  adults: number
  children: number
  imageSrc: string
  [k: string]: unknown
}

export type PackagesSinglePackageSchema = {
  origin: PackagePositionSchema
  destination: PackagePositionSchema
  time: PackagesSinglePackageTimeSchema
  durationDays: number
  title: string
  description: string
  courierOptionals: PackagesShipmentPackageOptionalSchema[]
  shipmentOptionals: ShipmentOptionalSchema[]
  insurance?: InsuranceSchema
  code: "BASIC" | "PREMIUM" | "ALL_INCLUSIVE_PUBLIC" | "ALL_INCLUSIVE_PRIVATE" | "LAST_MINUTE"
  cost: CostSchema
  [k: string]: unknown
}

export type PackagesSinglePackageTimeSchema = {
  outward: {
    deliveryDate: DateSchema
    pickupDate: DateSchema
    [k: string]: unknown
  }
  return?: {
    deliveryDate: DateSchema
    pickupDate: DateSchema
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type PackagesTimeSchema = {
  outwardDate: string
  returnDate?: string
  [k: string]: unknown
}

export type LogUser200ResponseSchema = LoginResponseSchema | MfaLoginResponseSchema

export type LogUser400ResponseSchema = ValidationErrorResponseSchema

export type LogUser404ResponseSchema = UserNotFoundErrorResponseSchema

export type LogUser405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type LogUser415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type LogUser429ResponseSchema = ThrottlingErrorResponseSchema

export type LogUser500ResponseSchema = UnexpectedErrorResponseSchema

export type LogUserRequestSchema = LoginUserRequestSchema

export type VerifyRememberToken200ResponseSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  token: string
  userId: string
  sessionId: string
  [k: string]: unknown
}

export type VerifyRememberToken400ResponseSchema = ValidationErrorResponseSchema

export type VerifyRememberToken401ResponseSchema = InvalidRememberTokenErrorResponseSchema

export type VerifyRememberToken405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyRememberToken415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyRememberToken429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyRememberToken500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyRememberTokenRequestSchema = {
  token: string
  [k: string]: unknown
}

export type GetStructures200ResponseSchema = StructureSchema[]

export type GetStructures400ResponseSchema = ValidationErrorResponseSchema

export type GetStructures404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetStructures405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetStructures415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetStructures429ResponseSchema = ThrottlingErrorResponseSchema

export type GetStructures500ResponseSchema = UnexpectedErrorResponseSchema

export type GetStructuresRequestSchema =
  | {
      with: "ids"
      ids: UuidSchema[]
      [k: string]: unknown
    }
  | {
      with: "search"
      search: string
      limit?: number
      [k: string]: unknown
    }
  | {
      with: "all"
      limit?: number
      [k: string]: unknown
    }

export type GetLuggageContents200ResponseSchema = LuggageContentSchema[]

export type GetLuggageContents400ResponseSchema = ValidationErrorResponseSchema

export type GetLuggageContents404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetLuggageContents405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetLuggageContents415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetLuggageContents429ResponseSchema = ThrottlingErrorResponseSchema

export type GetLuggageContents500ResponseSchema = UnexpectedErrorResponseSchema

export type GetLuggageContentsRequestSchema = {
  ids?: UuidSchema[]
  [k: string]: unknown
}

export type ConfirmUserRequestSchema = {
  code: string
}

export type SignupUserRequestSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  password: StrongPasswordSchema
  dateOfBirth: string
  phoneNumber: PhoneNumberSchema
  sessionId: string
}

export type LoginUserRequestSchema =
  | {
      email: EmailSchema
      password: string
      emailSelected: true
      rememberMe: boolean
    }
  | {
      phoneNumber: string
      password: string
      emailSelected: false
      rememberMe: boolean
    }

export type LoginResponseSchema = {
  mfaRequired: false
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  token?: string
  userId: string
  sessionId: string
  isAssistant: boolean
  [k: string]: unknown
}

export type MfaLoginResponseSchema = {
  mfaRequired: true
  id: string
  [k: string]: unknown
}

export type SendConfirmCodeResponseSchema = {
  token: string
  [k: string]: unknown
}

export type StructureSchema = {
  id: UuidSchema
  name: string
  bookingId: number
  bookingLink: string
  position: {
    placeId: UuidSchema
    address: string
    houseNumber: string
    [k: string]: unknown
  } & GeneralPositionSchema
  [k: string]: unknown
}

export type GetUserSettings200ResponseSchema = UserSettingsResponseSchema

export type GetUserSettings400ResponseSchema = ValidationErrorResponseSchema

export type GetUserSettings404ResponseSchema = UserNotFoundErrorResponseSchema

export type GetUserSettings405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetUserSettings415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetUserSettings429ResponseSchema = ThrottlingErrorResponseSchema

export type GetUserSettings500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteUser200ResponseSchema = OkResponseSchema

export type DeleteUser400ResponseSchema = ValidationErrorResponseSchema

export type DeleteUser404ResponseSchema = UserNotFoundErrorResponseSchema

export type DeleteUser405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeleteUser409ResponseSchema = UserHasActiveTravelsErrorResponseSchema

export type DeleteUser415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeleteUser429ResponseSchema = ThrottlingErrorResponseSchema

export type DeleteUser500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteSavedCard200ResponseSchema = OkResponseSchema

export type DeleteSavedCard400ResponseSchema = ValidationErrorResponseSchema

export type DeleteSavedCard404ResponseSchema = UserSavedCardNotFoundErrorResponseSchema

export type DeleteSavedCard405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeleteSavedCard415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeleteSavedCard429ResponseSchema = ThrottlingErrorResponseSchema

export type DeleteSavedCard500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteSavedCardRequestSchema = {
  cardNumber: string
  [k: string]: unknown
}

export type ModifySettings200ResponseSchema = OkResponseSchema

export type ModifySettings400ResponseSchema = ValidationErrorResponseSchema

export type ModifySettings405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type ModifySettings415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type ModifySettings429ResponseSchema = ThrottlingErrorResponseSchema

export type ModifySettings500ResponseSchema = UnexpectedErrorResponseSchema

export type ModifySettingsRequestSchema = ModifyUserSettingsRequestSchema

export type ChangePassword200ResponseSchema = OkResponseSchema

export type ChangePassword400ResponseSchema = ValidationErrorResponseSchema

export type ChangePassword401ResponseSchema = SameOldAndNewPasswordErrorResponseSchema

export type ChangePassword404ResponseSchema = UserNotFoundErrorResponseSchema

export type ChangePassword405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type ChangePassword410ResponseSchema = ChangePasswordTokenIsExpiredErrorResponseSchema

export type ChangePassword415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type ChangePassword429ResponseSchema = ThrottlingErrorResponseSchema

export type ChangePassword500ResponseSchema = UnexpectedErrorResponseSchema

export type ChangePasswordRequestSchema =
  | {
      token: string
      newPassword: StrongPasswordSchema
      tokenSelected: true
      [k: string]: unknown
    }
  | {
      newPassword: StrongPasswordSchema
      tokenSelected: false
      [k: string]: unknown
    }

export type SendChangePasswordEmail200ResponseSchema = OkResponseSchema

export type SendChangePasswordEmail400ResponseSchema = ValidationErrorResponseSchema

export type SendChangePasswordEmail404ResponseSchema = UserNotFoundErrorResponseSchema

export type SendChangePasswordEmail405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SendChangePasswordEmail415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SendChangePasswordEmail429ResponseSchema = ThrottlingErrorResponseSchema

export type SendChangePasswordEmail500ResponseSchema = UnexpectedErrorResponseSchema

export type SendChangePasswordEmailRequestSchema = {
  email: EmailSchema
  [k: string]: unknown
}

export type CheckChangePasswordToken200ResponseSchema = OkResponseSchema

export type CheckChangePasswordToken400ResponseSchema = ValidationErrorResponseSchema

export type CheckChangePasswordToken401ResponseSchema = InvalidChangePasswordTokenErrorResponseSchema

export type CheckChangePasswordToken404ResponseSchema = ChangePasswordTOkenNotFoundErrorResponseSchema

export type CheckChangePasswordToken405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CheckChangePasswordToken410ResponseSchema = ChangePasswordTokenIsExpiredErrorResponseSchema

export type CheckChangePasswordToken415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CheckChangePasswordToken429ResponseSchema = ThrottlingErrorResponseSchema

export type CheckChangePasswordToken500ResponseSchema = UnexpectedErrorResponseSchema

export type CheckChangePasswordTokenRequestSchema = {
  token: string
  [k: string]: unknown
}

export type GetUserCommunications200ResponseSchema = GetUserCommunicationsResponseSchema

export type GetUserCommunications400ResponseSchema = ValidationErrorResponseSchema

export type GetUserCommunications404ResponseSchema = UserNotFoundErrorResponseSchema

export type GetUserCommunications405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetUserCommunications415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetUserCommunications429ResponseSchema = ThrottlingErrorResponseSchema

export type GetUserCommunications500ResponseSchema = UnexpectedErrorResponseSchema

export type GetUserCommunicationsRequestSchema = {
  limit?: number
  generalOrder?: "ASC" | "DESC"
  shipmentOrder?: "ASC" | "DESC"
  [k: string]: unknown
}

export type Logout200ResponseSchema = OkResponseSchema

export type Logout400ResponseSchema = ValidationErrorResponseSchema

export type Logout401ResponseSchema = UserNotLoggedErrorResponseSchema

export type Logout405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type Logout415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type Logout429ResponseSchema = ThrottlingErrorResponseSchema

export type Logout500ResponseSchema = UnexpectedErrorResponseSchema

export type ResendResetPassword200ResponseSchema = OkResponseSchema

export type ResendResetPassword400ResponseSchema = ValidationErrorResponseSchema

export type ResendResetPassword404ResponseSchema = ChangePasswordTOkenNotFoundErrorResponseSchema

export type ResendResetPassword405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type ResendResetPassword415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type ResendResetPassword429ResponseSchema = ThrottlingErrorResponseSchema

export type ResendResetPassword500ResponseSchema = UnexpectedErrorResponseSchema

export type ResendResetPasswordRequestSchema = {
  email: EmailSchema
  [k: string]: unknown
}

export type GetUserShipments200ResponseSchema = {
  pendingShipments: {
    outwardShipment: SinglePendingShipmentSchema
    returnShipment?: SinglePendingShipmentSchema
    [k: string]: unknown
  }[]
  normalShipments: {
    notConfirmed: GetNormalShipmentResponseSchema[]
    inProgress: GetNormalShipmentResponseSchema[]
    completed: GetNormalShipmentResponseSchema[]
    cancelled: GetNormalShipmentResponseSchema[]
    all: GetNormalShipmentResponseSchema[]
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type GetUserShipments400ResponseSchema = ValidationErrorResponseSchema

export type GetUserShipments405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetUserShipments415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetUserShipments429ResponseSchema = ThrottlingErrorResponseSchema

export type GetUserShipments500ResponseSchema = UnexpectedErrorResponseSchema

export type GetUserShipmentsRequestSchema = {
  search?: string
  field?: "origin" | "destination" | "all"
  limit?: number
  [k: string]: unknown
}

export type SaveLuggage200ResponseSchema = OkResponseSchema

export type SaveLuggage400ResponseSchema = ValidationErrorResponseSchema

export type SaveLuggage401ResponseSchema = UnauthenticatedErrorResponseSchema

export type SaveLuggage405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SaveLuggage415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SaveLuggage429ResponseSchema = ThrottlingErrorResponseSchema

export type SaveLuggage500ResponseSchema = UnexpectedErrorResponseSchema

export type SaveLuggageRequestSchema = {
  luggage: SavedLuggageSchema
  [k: string]: unknown
}

export type GetSavedLuggage200ResponseSchema = SavedLuggageSchemaWithType[]

export type GetSavedLuggage400ResponseSchema = ValidationErrorResponseSchema

export type GetSavedLuggage401ResponseSchema = UnauthenticatedErrorResponseSchema

export type GetSavedLuggage404ResponseSchema = LuggageNotFoundErrorResponseSchema

export type GetSavedLuggage405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetSavedLuggage415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetSavedLuggage429ResponseSchema = ThrottlingErrorResponseSchema

export type GetSavedLuggage500ResponseSchema = UnexpectedErrorResponseSchema

export type GetSavedLuggageRequestSchema = {
  ids?: UuidSchema[]
  [k: string]: unknown
}

export type DeleteSavedLuggage200ResponseSchema = OkResponseSchema

export type DeleteSavedLuggage400ResponseSchema = ValidationErrorResponseSchema

export type DeleteSavedLuggage404ResponseSchema = LuggageNotFoundErrorResponseSchema

export type DeleteSavedLuggage405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeleteSavedLuggage415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeleteSavedLuggage429ResponseSchema = ThrottlingErrorResponseSchema

export type DeleteSavedLuggage500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteSavedLuggageRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type AddUserCompany200ResponseSchema = OkResponseSchema

export type AddUserCompany400ResponseSchema = ValidationErrorResponseSchema

export type AddUserCompany401ResponseSchema = UnauthenticatedErrorResponseSchema

export type AddUserCompany405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type AddUserCompany409ResponseSchema = ConflictErrorResponseSchema

export type AddUserCompany415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type AddUserCompany429ResponseSchema = ThrottlingErrorResponseSchema

export type AddUserCompany500ResponseSchema = UnexpectedErrorResponseSchema

export type AddUserCompanyRequestSchema = CompanyDetailSchema

export type SaveUserCardCredentialsRequestSchema = {
  email: EmailSchema
  cardNumber: CardNumberSchema
  expirationDate: CardExpirationDateSchema
  holderFirstName: string
  holderLastName: string
  cardCvc: CardCvcSchema
  [k: string]: unknown
}

export type CommunicationSchema = {
  id: UuidSchema
  title: string
  description: string
  creationTimestamp: DateSchema
  [k: string]: unknown
}

export type CompanyWithIdSchema = CompanyDetailSchema & {
  id: string
  [k: string]: unknown
}

export type GetLuggagesPackageResponseSchema = {
  id: UuidSchema
  luggage: SavedLuggageSchemaWithType
  [k: string]: unknown
}

export type GetUserCommunicationsResponseSchema = {
  general: (CommunicationSchema & {
    communicationType: "general"
    link: string
    [k: string]: unknown
  })[]
  shipment: (CommunicationSchema & {
    communicationType: "travel"
    shipmentId: UuidSchema
    [k: string]: unknown
  })[]
  [k: string]: unknown
}

export type UserSettingsResponseSchema = {
  phoneNumber: PhoneNumberSchema
  dateOfBirth: string
  email: string
  firstName: string
  lastName: string
  savedLuggages: (SavedLuggageSchemaWithType & {
    id: string
    [k: string]: unknown
  })[]
  mfaEnabled: boolean
  company?: CompanyWithIdSchema
  [k: string]: unknown
}

export type LogUserResponseSchema =
  | {
      email: EmailSchema
      password: StrongPasswordSchema
      emailSelected: true
      rememberMe: boolean
    }
  | {
      phoneNumber: PhoneNumberSchema
      password: StrongPasswordSchema
      emailSelected: false
      rememberMe: boolean
    }

export type ModifyUserSettingsRequestSchema = {
  firstName: string
  lastName: string
  dateOfBirth: string
  customerId?: string
  [k: string]: unknown
}

export type SavedLuggageSchema = {
  name: string
  width: number
  height: number
  length: number
  content?: LuggageContentSchema[]
  dimensionUnit: string
  [k: string]: unknown
}

export type SavedLuggageSchemaWithType = SavedLuggageSchema & {
  type: string
  creationTimestamp: DateSchema
  [k: string]: unknown
}

export type CreateIntent200ResponseSchema = {
  cost: CostSchema
  intent: StripeIntentSchema
  [k: string]: unknown
}

export type CreateIntent400ResponseSchema = ValidationErrorResponseSchema

export type CreateIntent404ResponseSchema = UserNotFoundErrorResponseSchema

export type CreateIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CreateIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CreateIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type CreateIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type CreateIntentRequestSchema = {
  courierId: UuidSchema
  origin: RequestPositionSchema
  destination: RequestPositionSchema
  luggages: ShipmentLuggageSchema[]
  type: "oneWay" | "roundTrip"
  optionals: AdditionalOptionsSchema
  [k: string]: unknown
}

export type UpdatePaymentIntent200ResponseSchema = {
  clientSecret: string
  [k: string]: unknown
}

export type UpdatePaymentIntent400ResponseSchema = ValidationErrorResponseSchema

export type UpdatePaymentIntent404ResponseSchema = StripePaymentIntentNotFoundErrorResponseSchema

export type UpdatePaymentIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type UpdatePaymentIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type UpdatePaymentIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type UpdatePaymentIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type UpdatePaymentIntentRequestSchema = {
  amountCents: number
  currency: CurrencySchema
  [k: string]: unknown
}

export type CancelPaymentIntent200ResponseSchema = OkResponseSchema

export type CancelPaymentIntent400ResponseSchema = ValidationErrorResponseSchema

export type CancelPaymentIntent404ResponseSchema = StripePaymentIntentNotFoundErrorResponseSchema

export type CancelPaymentIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CancelPaymentIntent409ResponseSchema = StripePaymentIntentAlreadyCanceledErrorResponseSchema

export type CancelPaymentIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CancelPaymentIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type CancelPaymentIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type CancelPaymentIntentRequestSchema = {
  intentId: UuidSchema
  reason?: "duplicate" | "fraudulent" | "requested_by_customer" | "abandoned"
  [k: string]: unknown
}

export type RetrievePaymentIntent200ResponseSchema = {
  clientSecret: string
  intentId: UuidSchema
  [k: string]: unknown
}

export type RetrievePaymentIntent400ResponseSchema = ValidationErrorResponseSchema

export type RetrievePaymentIntent404ResponseSchema = StripePaymentIntentNotFoundErrorResponseSchema

export type RetrievePaymentIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type RetrievePaymentIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type RetrievePaymentIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type RetrievePaymentIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type RetrievePaymentIntentRequestSchema = RetrieveStripePaymentIntentRequestSchema

export type VerifyPaymentIntent200ResponseSchema = OkResponseSchema

export type VerifyPaymentIntent400ResponseSchema = ValidationErrorResponseSchema

export type VerifyPaymentIntent403ResponseSchema = UserForbiddenErrorResponseSchema

export type VerifyPaymentIntent404ResponseSchema = StripePaymentIntentNotFoundErrorResponseSchema

export type VerifyPaymentIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyPaymentIntent409ResponseSchema = StripePaymentIntentAlreadyCapturedErrorResponseSchema

export type VerifyPaymentIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyPaymentIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyPaymentIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyPaymentIntentRequestSchema = {
  clientSecret: string
  intentId: UuidSchema
  [k: string]: unknown
}

export type CapturePaymentIntent200ResponseSchema = OkResponseSchema

export type CapturePaymentIntent400ResponseSchema = ValidationErrorResponseSchema

export type CapturePaymentIntent404ResponseSchema = StripePaymentIntentNotFoundErrorResponseSchema

export type CapturePaymentIntent405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CapturePaymentIntent415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CapturePaymentIntent429ResponseSchema = ThrottlingErrorResponseSchema

export type CapturePaymentIntent500ResponseSchema = UnexpectedErrorResponseSchema

export type CapturePaymentIntentRequestSchema = {
  intentId: UuidSchema
  [k: string]: unknown
}

export type CreatePaymwentIntent200ResponseSchema = {
  clientSecret: string
  [k: string]: unknown
}

export type CreatePaymentIntentRequestSchema = {
  priceCents: number
  currency: CurrencySchema
  [k: string]: unknown
}

export type InitSaveUserPaymentDetails200ResponseSchema = {
  clientSecret: string
  [k: string]: unknown
}

export type StripeIntentIdRequestSchema = {
  intentId: string
  [k: string]: unknown
}

export type RetrieveStripePaymentIntentRequestSchema = {
  intentId?: string
  [k: string]: unknown
}

export type StripeIntentSchema = {
  id: string
  clientSecret: string
  amount: number
  currency: string
  createdAt: DateSchema
  [k: string]: unknown
}

export type GetUsers200ResponseSchema = UserDetailSchema[]

export type GetUsers400ResponseSchema = ValidationErrorResponseSchema

export type GetUsers405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetUsers415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetUsers429ResponseSchema = ThrottlingErrorResponseSchema

export type GetUsers500ResponseSchema = UnexpectedErrorResponseSchema

export type GetUsersRequestSchema = {
  status?: "ACTIVE" | "DELETED"
  [k: string]: unknown
}

export type GetHelpRequests200ResponseSchema = HelpRequestSchema[]

export type GetHelpRequests400ResponseSchema = ValidationErrorResponseSchema

export type GetHelpRequests405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetHelpRequests415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetHelpRequests429ResponseSchema = ThrottlingErrorResponseSchema

export type GetHelpRequests500ResponseSchema = UnexpectedErrorResponseSchema

export type GetHelpRequestsRequestSchema = {
  status?: ("OPEN" | "CLOSED")[]
  users?: string[]
  search?: string
  category?: ("travelCreation" | "general" | "payment")[]
  importance?: ("low" | "medium" | "high")[]
  [k: string]: unknown
}

export type AdminGetNormalShipments200ResponseSchema = {
  outwardShipment: SingleCompleteNormalShipmentSchema
  returnShipment?: SingleCompleteNormalShipmentSchema
  [k: string]: unknown
}[]

export type AdminGetNormalShipments400ResponseSchema = ValidationErrorResponseSchema

export type AdminGetNormalShipments405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type AdminGetNormalShipments415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type AdminGetNormalShipments429ResponseSchema = ThrottlingErrorResponseSchema

export type AdminGetNormalShipments500ResponseSchema = UnexpectedErrorResponseSchema

export type AdminGetNormalShipmentsRequestSchema = {
  users?: string[]
  status?: string[]
  search?: string
  searchField?: "DESTINATION" | "ORIGIN"
  [k: string]: unknown
}

export type GetErrors200ResponseSchema = ErrorSchema[]

export type GetErrors400ResponseSchema = ValidationErrorResponseSchema

export type GetErrors405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetErrors415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetErrors429ResponseSchema = ThrottlingErrorResponseSchema

export type GetErrors500ResponseSchema = UnexpectedErrorResponseSchema

export type GetErrorsRequestSchema = {
  startDate?: string
  endDate?: string
  [k: string]: unknown
}

export type AdminGetPendingShipments200ResponseSchema = {
  outwardShipment: SinglePendingShipmentSchema
  returnShipment?: SinglePendingShipmentSchema
  [k: string]: unknown
}[]

export type AdminGetPendingShipments400ResponseSchema = ValidationErrorResponseSchema

export type AdminGetPendingShipments405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type AdminGetPendingShipments415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type AdminGetPendingShipments429ResponseSchema = ThrottlingErrorResponseSchema

export type AdminGetPendingShipments500ResponseSchema = UnexpectedErrorResponseSchema

export type AdminGetPendingShipmentsRequestSchema = {
  dateSort?: "ASC" | "DESC"
  [k: string]: unknown
}

export type DeleteUserSession200ResponseSchema = OkResponseSchema

export type DeleteUserSession400ResponseSchema = ValidationErrorResponseSchema

export type DeleteUserSession404ResponseSchema = SessionNotFoundErrorResponseSchema

export type DeleteUserSession405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type DeleteUserSession415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type DeleteUserSession429ResponseSchema = ThrottlingErrorResponseSchema

export type DeleteUserSession500ResponseSchema = UnexpectedErrorResponseSchema

export type DeleteUserSessionRequestSchema = {
  userId: UuidSchema
  [k: string]: unknown
}

export type UpdateError200ResponseSchema = OkResponseSchema

export type UpdateError400ResponseSchema = ValidationErrorResponseSchema

export type UpdateError404ResponseSchema = GenericNotFoundErrorResponseSchema

export type UpdateError405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type UpdateError415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type UpdateError429ResponseSchema = ThrottlingErrorResponseSchema

export type UpdateError500ResponseSchema = UnexpectedErrorResponseSchema

export type UpdateErrorRequestSchema = {
  id: UuidSchema
  status: "PENDING" | "RESOLVED"
  [k: string]: unknown
}

export type SendHelpResponse200ResponseSchema = OkResponseSchema

export type SendHelpResponse400ResponseSchema = ValidationErrorResponseSchema

export type SendHelpResponse401ResponseSchema = UnauthenticatedErrorResponseSchema

export type SendHelpResponse404ResponseSchema = GenericNotFoundErrorResponseSchema

export type SendHelpResponse405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SendHelpResponse410ResponseSchema = AlreadyClosedHelpRequestErrorResponseSchema

export type SendHelpResponse415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SendHelpResponse429ResponseSchema = ThrottlingErrorResponseSchema

export type SendHelpResponse500ResponseSchema = UnexpectedErrorResponseSchema

export type SendHelpResponseRequestSchema = {
  message: string
  requestId: UuidSchema
  [k: string]: unknown
}

export type RejectPendingShipment200ResponseSchema = OkResponseSchema

export type RejectPendingShipment400ResponseSchema = ValidationErrorResponseSchema

export type RejectPendingShipment404ResponseSchema = TravelNotFoundErrorResponseSchema

export type RejectPendingShipment405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type RejectPendingShipment415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type RejectPendingShipment429ResponseSchema = ThrottlingErrorResponseSchema

export type RejectPendingShipment500ResponseSchema = UnexpectedErrorResponseSchema

export type RejectPendingShipmentRequestSchema = {
  id: UuidSchema
  motivation: string
  [k: string]: unknown
}

export type BaseHelpRequestSchema = {
  id: string
  name: string
  status: "OPEN" | "CLOSED"
  [k: string]: unknown
}

export type ErrorSchema = {
  datetime: string
  message: string
  code?: string
  stack?: string
  status: "PENDING" | "RESOLVED"
  [k: string]: unknown
}

export type HelpRequestResponseSchema = {
  id: string
  description: string
  operator: OperatorSchema
  [k: string]: unknown
}

export type HelpRequestSchema = {
  id: string
  title: string
  description: string
  status: "OPEN" | "CLOSED"
  importance: "low" | "medium" | "high"
  category: "travelCreation" | "general" | "payment"
  response?: HelpRequestResponseSchema
  timestamp: string
  user: BaseUserSchema
  [k: string]: unknown
}

export type OperatorSchema = {
  type: "CLIENT" | "OPERATOR"
  firstName: string
  lastName: string
  [k: string]: unknown
}

export type TravelSchemaWithCompleteUser = ShipmentSchema & {
  user: UserDetailSchema
  [k: string]: unknown
}

export type TravelSchemaWithStatus = ShipmentSchemaWithBaseUser & {
  status: StatusSchema[]
  [k: string]: unknown
}

export type AdminPlaceSchema = {
  detailedName: string
  structure?: {
    name: string
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type AdminTimeSchema = {
  pickupDatetime: string
  deliveryDatetime: string
  [k: string]: unknown
}

export type BaseShipmentSchema = {
  id: string
  completeDestination: AdminPlaceSchema
  completeOrigin: AdminPlaceSchema
  status: StatusSchema
  luggagesNumber: number
  [k: string]: unknown
}

export type BaseUserSchema = {
  firstName: string
  lastName: string
  email: string
  completePhone: string
  id: string
  [k: string]: unknown
}

export type LuggageSchema = {
  content: string
  weight: string
  width: string
  height: string
  length: string
  dimensionUnit: string
  weightUnit: string
  [k: string]: unknown
}

export type PendingShipmentSchema = ShipmentSchemaWithBaseUser

export type ShipmentAdditionalSchema = {
  differentReceiver?: {
    firstName: string
    lastName: string
    email: string
    completePhone: string
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type ShipmentSchema = {
  id: string
  destination: AdminPlaceSchema
  origin: AdminPlaceSchema
  luggages: CompleteLuggageSchema[]
  outwardTime: AdminTimeSchema
  returnTime?: AdminTimeSchema
  additional?: ShipmentAdditionalSchema
  [k: string]: unknown
}

export type ShipmentSchemaWithBaseUser = ShipmentSchema & {
  user: BaseUserSchema
  [k: string]: unknown
}

export type StatusSchema = {
  code: string
  description: string
  creationTimestamp: DateTimeSchema
  isActive: boolean
  [k: string]: unknown
}

export type UserDetailSchema = {
  id: string
  firstName: string
  lastName: string
  email: string
  status: "ACTIVE" | "DELETED"
  completePhone: string
  shipments: BaseShipmentSchema[]
  helpRequests: BaseHelpRequestSchema[]
  [k: string]: unknown
}

export type VerifyUserCredentials200ResponseSchema = OkResponseSchema

export type VerifyUserCredentials400ResponseSchema = ValidationErrorResponseSchema

export type VerifyUserCredentials404ResponseSchema = UserNotFoundErrorResponseSchema

export type VerifyUserCredentials405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyUserCredentials415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyUserCredentials429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyUserCredentials500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyUserCredentialsRequestSchema = {
  email: EmailSchema
  password: string
  [k: string]: unknown
}

export type VerifyEmailToken200ResponseSchema = OkResponseSchema

export type VerifyEmailToken400ResponseSchema = ValidationErrorResponseSchema

export type VerifyEmailToken404ResponseSchema = ConfirmUserPhoneTokenIsExpiredErrorResponseSchema

export type VerifyEmailToken405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyEmailToken410ResponseSchema = ConfirmUserPhoneTokenIsExpiredErrorResponseSchema

export type VerifyEmailToken415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyEmailToken429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyEmailToken500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyEmailTokenRequestSchema = {
  token: string
  [k: string]: unknown
}

export type VerifyAuthentication200ResponseSchema = {
  id: UuidSchema
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  isAssistant: boolean
  [k: string]: unknown
}

export type VerifyAuthentication400ResponseSchema = ValidationErrorResponseSchema

export type VerifyAuthentication401ResponseSchema = UnauthenticatedErrorResponseSchema

export type VerifyAuthentication405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyAuthentication415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyAuthentication429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyAuthentication500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyAssistant200ResponseSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  isAssistant: true
  [k: string]: unknown
}

export type VerifyAssistant400ResponseSchema = ValidationErrorResponseSchema

export type VerifyAssistant403ResponseSchema = GenericForbiddenErrorResponseSchema

export type VerifyAssistant405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyAssistant415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyAssistant429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyAssistant500ResponseSchema = UnexpectedErrorResponseSchema

export type IsPhoneUnique200ResponseSchema = {
  isUnique: boolean
  [k: string]: unknown
}

export type IsPhoneUnique400ResponseSchema = ValidationErrorResponseSchema

export type IsPhoneUnique405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type IsPhoneUnique415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type IsPhoneUnique429ResponseSchema = ThrottlingErrorResponseSchema

export type IsPhoneUnique500ResponseSchema = UnexpectedErrorResponseSchema

export type IsPhoneUniqueRequestSchema = {
  phone: PhoneNumberSchema
  [k: string]: unknown
}

export type GetAvailableAccomodations200ResponseSchema = {
  accomodations: BaseAccomodationSchema[]
  request: {
    place: AccomodationPlaceSchema
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type GetAvailableAccomodations400ResponseSchema = ValidationErrorResponseSchema

export type GetAvailableAccomodations404ResponseSchema = GenericNotFoundErrorResponseSchema

export type GetAvailableAccomodations405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetAvailableAccomodations415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetAvailableAccomodations429ResponseSchema = ThrottlingErrorResponseSchema

export type GetAvailableAccomodations500ResponseSchema = UnexpectedErrorResponseSchema

export type GetAvailableAccomodationsRequestSchema = {
  placeId: UuidSchema
  checkIn: string
  checkOut: string
  guests: GuestsSchema
  roomsNumber: number
  filters: FiltersSchema
  orderBy: OrderBySchema
  [k: string]: unknown
}

export type GetAccomodationDetails200ResponseSchema = {
  detail: DetailAccomodationSchema
  availability: AvailabilityAccomodationSchema
  rating: RatingDetailSchema
  [k: string]: unknown
}

export type GetAccomodationDetails400ResponseSchema = ValidationErrorResponseSchema

export type GetAccomodationDetails404ResponseSchema = StructureNotFoundErrorResponseSchema

export type GetAccomodationDetails405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetAccomodationDetails415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetAccomodationDetails429ResponseSchema = ThrottlingErrorResponseSchema

export type GetAccomodationDetails500ResponseSchema = UnexpectedErrorResponseSchema

export type GetAccomodationDetailsRequestSchema = {
  accomodationId: string
  checkIn: string
  checkOut: string
  guests: GuestsSchema
  roomNumber: number
  [k: string]: unknown
}

export type GetConstants200ResponseSchema = {
  accomodationFacilities?: (BaseAccomodationConstantSchema & {
    facilityType: number
    [k: string]: unknown
  })[]
  accomodationTheme?: BaseAccomodationConstantSchema[]
  accomodationTypes?: BaseAccomodationConstantSchema[]
  bedTypes?: (BaseAccomodationConstantSchema & {
    description: string
    descriptionImperial: string
    [k: string]: unknown
  })[]
  chargeType?: BaseAccomodationConstantSchema[]
  facilityTypes?: BaseAccomodationConstantSchema[]
  revireScores?: {
    minScore: number
    maxScore: number
    [k: string]: unknown
  }[]
  roomFacilities?: (BaseAccomodationConstantSchema & {
    facilityType: number
    [k: string]: unknown
  })[]
  roomTypes?: BaseAccomodationConstantSchema[]
  mealPlans: {
    id: string
    name: string
    [k: string]: unknown
  }[]
  [k: string]: unknown
}

export type GetConstants400ResponseSchema = ValidationErrorResponseSchema

export type GetConstants405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetConstants415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetConstants429ResponseSchema = ThrottlingErrorResponseSchema

export type GetConstants500ResponseSchema = UnexpectedErrorResponseSchema

export type GetConstantsRequestSchema = {
  constantsCategory: (
    | "accommodation_facilities"
    | "accommodation_themes"
    | "accommodation_types"
    | "bed_types"
    | "charge_types"
    | "facility_types"
    | "review_scores"
    | "room_facilities"
    | "room_types"
  )[]
  [k: string]: unknown
}

export type GetBestAccomodations200ResponseSchema = BestAccomodatioDetailSchema[]

export type GetBestAccomodations400ResponseSchema = ValidationErrorResponseSchema

export type GetBestAccomodations405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetBestAccomodations415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetBestAccomodations429ResponseSchema = ThrottlingErrorResponseSchema

export type GetBestAccomodations500ResponseSchema = UnexpectedErrorResponseSchema

export type GetBestAccomodationsRequestSchema = {
  country: string
  [k: string]: unknown
}

export type AvailabilityAccomodationSchema = {
  id: string
  currency: string
  products: {
    id: string
    maxOccupancy: {
      adults: number
      children: number
      total: number
      [k: string]: unknown
    }
    numberAvailableAtThisPrice: number
    policies: {
      cancellation?: {
        freeCancellationUntil: string
        type: string
        [k: string]: unknown
      }
      [k: string]: unknown
    }
    price: PriceSchema
    room: {
      id: string
      type: string
      [k: string]: unknown
    }
    [k: string]: unknown
  }[]
  url: string
  [k: string]: unknown
}

export type BaseAccomodationConstantSchema = {
  id: number
  name: string
  [k: string]: unknown
}

export type BaseAccomodationSchema = {
  id: string
  price: PriceWithChargesSchema
  accomodationType: string
  description: string
  location: LocationSchema
  name: string
  mainPhotoUrl: string
  rating: {
    numberOfReviews: number
    reviewScore: number
    stars: number
    starsType: string
    [k: string]: unknown
  }
  preferredRoom: {
    id: string
    bedType: string
    numberOfBeds: number
    [k: string]: unknown
  }
  url: string
  [k: string]: unknown
}

export type BestAccomodatioDetailSchema = {
  id: number
  title: string
  location: {
    city: string
    country: string
    [k: string]: unknown
  }
  basePrice: number
  rating: {
    stars: number
    numberOfReviews: number
    reviewScore: number
    [k: string]: unknown
  }
  mainPhotoUrl: string
  [k: string]: unknown
}

export type CheckInOutSchema = {
  from: string
  to: string
  [k: string]: unknown
}

export type ChilrenAgesSchema = number[]

export type ContactSchema = {
  email?: string
  phone?: string
  [k: string]: unknown
}

export type DetailAccomodationSchema = {
  id: string
  brands: string[]
  checkInOutTimes: {
    checkin: CheckInOutSchema
    checkout: CheckInOutSchema
    [k: string]: unknown
  }
  contacts: {
    general?: ContactSchema
    reservation?: ContactSchema
    [k: string]: unknown
  }
  currency: string
  description: {
    important: string
    text: string
    [k: string]: unknown
  }
  facilities: {
    id: string
    attributes: string
    [k: string]: unknown
  }[]
  location: LocationSchema
  name: string
  photos: ExtendedPhotosSchema[]
  policies: {
    cotsAndExtraBeds: {
      age: CheckInOutSchema
      mode: string
      price: number
      type: string
      [k: string]: unknown
    }
    maxCheckinAge: number
    minCheckinAge: number
    minGuestsAge: number
    pets: {
      allowed: boolean
      [k: string]: unknown
    }
    [k: string]: unknown
  }
  rating: {
    numberOfReviews: number
    preferred: boolean
    reviewScore: number
    stars: number
    starsType: string
    [k: string]: unknown
  }
  rooms: RoomDetailSchema[]
  url: string
  [k: string]: unknown
}

export type ExtendedPhotosSchema = {
  isMain: boolean
  tags: string[]
  url: {
    large: string
    standard: string
    thumbnail: string
    thumbnailLarge: string
    [k: string]: unknown
  }
  [k: string]: unknown
}

export type FiltersSchema = {
  facilities?: string[]
  price?: {
    max?: number
    min?: number
    [k: string]: unknown
  }
  mealPlan?: ("all_inclusive" | "breakfast_included" | "full_board" | "half_board" | "no_plan")[]
  stars?: number[]
  [k: string]: unknown
}

export type GuestsSchema = {
  childrenAges?: ChilrenAgesSchema
  adults: number
  [k: string]: unknown
}

export type LocationSchema = {
  country: string
  city: string
  coordinates: CoordinatesRequestSchema
  cap: string
  address: string
  [k: string]: unknown
}

export type OrderBySchema = {
  field?: "PRICE" | "STARS" | "REVIEWS" | "RECOMMENDED"
  order?: "ASC" | "DESC"
  [k: string]: unknown
}

export type PriceSchema = {
  base: number
  book: number
  total: number
  [k: string]: unknown
}

export type PriceWithChargesSchema = PriceSchema & {
  extraCharges: number
  [k: string]: unknown
}

export type RatingDetailSchema = {
  comments: {
    id: number
    date: string
    positive?: string
    negative?: string
    score: number
    summary: string
    [k: string]: unknown
  }[]
  scores: {
    category: "cleanliness" | "comfort" | "facilities" | "free_wifi" | "location" | "staff" | "value_for_money"
    score: number
    numberOfReviews: number
    [k: string]: unknown
  }[]
  [k: string]: unknown
}

export type RoomDetailSchema = {
  id: string
  bedOptions: {
    configurations: {
      bedType: string
      numberOfBeds: number
      [k: string]: unknown
    }[]
    hasBathroom: boolean
    isBedroom: boolean
    [k: string]: unknown
  }
  cotsAndExtraBeds: {
    areAllowed: boolean
    maxCots: number
    maxExtraBeds: number
    [k: string]: unknown
  }
  description: string
  name: string
  photos: ExtendedPhotosSchema[]
  roomType: string
  [k: string]: unknown
}

export type AccomodationPlaceSchema = {
  id: UuidSchema
  state: string
  region: string
  province: ProvinceSchema
  place: string
  cap: string
  coordinates: CoordinatesRequestSchema
  [k: string]: unknown
}

export type SendGeneralHelpRequest200ResponseSchema = OkResponseSchema

export type SendGeneralHelpRequest400ResponseSchema = ValidationErrorResponseSchema

export type SendGeneralHelpRequest405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SendGeneralHelpRequest415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SendGeneralHelpRequest429ResponseSchema = ThrottlingErrorResponseSchema

export type SendGeneralHelpRequest500ResponseSchema = UnexpectedErrorResponseSchema

export type SendGeneralHelpRequestRequestSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  title: string
  description: string
  [k: string]: unknown
}

export type SendHelpRequest200ResponseSchema = OkResponseSchema

export type SendHelpRequest400ResponseSchema = ValidationErrorResponseSchema

export type SendHelpRequest405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SendHelpRequest415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SendHelpRequest429ResponseSchema = ThrottlingErrorResponseSchema

export type SendHelpRequest500ResponseSchema = UnexpectedErrorResponseSchema

export type SendHelpRequestRequestSchema = {
  category: "travelCreation" | "general" | "payment"
  importance: "low" | "medium" | "high"
  title: string
  description: string
  [k: string]: unknown
}

export type AcceptHelpRequest200ResponseSchema = OkResponseSchema

export type AcceptHelpRequest400ResponseSchema = ValidationErrorResponseSchema

export type AcceptHelpRequest401ResponseSchema = UnauthenticatedErrorResponseSchema

export type AcceptHelpRequest403ResponseSchema = GenericForbiddenErrorResponseSchema

export type AcceptHelpRequest404ResponseSchema = HelpRequestNotFoundErrorResponseSchema

export type AcceptHelpRequest405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type AcceptHelpRequest409ResponseSchema = AlreadyAcceptedHelpRequestErrorResponseSchema

export type AcceptHelpRequest415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type AcceptHelpRequest429ResponseSchema = ThrottlingErrorResponseSchema

export type AcceptHelpRequest500ResponseSchema = UnexpectedErrorResponseSchema

export type AcceptHelpRequestRequestSchema = {
  helpRequestId: UuidSchema
  [k: string]: unknown
}

export type GetAssistanceRequest200ResponseSchema = UserAssistanceRequestSchema[]

export type GetAssistanceRequest400ResponseSchema = ValidationErrorResponseSchema

export type GetAssistanceRequest401ResponseSchema = UnauthenticatedErrorResponseSchema

export type GetAssistanceRequest405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetAssistanceRequest415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetAssistanceRequest429ResponseSchema = ThrottlingErrorResponseSchema

export type GetAssistanceRequest500ResponseSchema = UnexpectedErrorResponseSchema

export type GetAssistanceRequestRequestSchema = {
  from?: string
  to?: string
  [k: string]: unknown
}

export type HelpRequestSingleResponsechema = {
  assistant: {
    firstName: string
    lastName: string
    [k: string]: unknown
  }
  message: string
  creationTimestamp: string
  [k: string]: unknown
}

export type UserAssistanceRequestSchema =
  | (UserPartialAssistanceRequestSchema & {
      status: "OPEN"
      [k: string]: unknown
    })
  | (UserPartialAssistanceRequestSchema & {
      status: "CLOSED"
      response: HelpRequestSingleResponsechema
      [k: string]: unknown
    })

export type UserPartialAssistanceRequestSchema = {
  id: string
  title: string
  description: string
  category: "travelCreation" | "general" | "payment"
  importance: "low" | "medium" | "high"
  creationTimestamp: string
  [k: string]: unknown
}

export type VerifyUserUniqueness200ResponseSchema = {
  isUnique: boolean
}

export type VerifyUserUniqueness400ResponseSchema = ValidationErrorResponseSchema

export type VerifyUserUniqueness405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyUserUniqueness415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyUserUniqueness429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyUserUniqueness500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyUserUniquenessRequestSchema = {
  email: EmailSchema
  phone: PhoneNumberSchema
  [k: string]: unknown
}

export type SaveSignup200ResponseSchema = {
  sessionId: string
  [k: string]: unknown
}

export type SaveSignup400ResponseSchema = ValidationErrorResponseSchema

export type SaveSignup405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SaveSignup415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SaveSignup429ResponseSchema = ThrottlingErrorResponseSchema

export type SaveSignup500ResponseSchema = UnexpectedErrorResponseSchema

export type SaveSignupRequestSchema = {
  firstName: string
  lastName: string
  email: EmailSchema
  phone: PhoneNumberSchema
  password: string
  dateOfBirth: string
  companyDetail?: CompanyDetailSchema
  [k: string]: unknown
}

export type SendEmailConfirmationCode200ResponseSchema = SendConfirmCodeResponseSchema

export type SendEmailConfirmationCode400ResponseSchema = ValidationErrorResponseSchema

export type SendEmailConfirmationCode404ResponseSchema = SessionNotFoundErrorResponseSchema

export type SendEmailConfirmationCode405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type SendEmailConfirmationCode410ResponseSchema = SignupSessionIdExpiredErrorResponseSchema

export type SendEmailConfirmationCode415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type SendEmailConfirmationCode429ResponseSchema = ThrottlingErrorResponseSchema

export type SendEmailConfirmationCode500ResponseSchema = UnexpectedErrorResponseSchema

export type SendEmailConfirmationCodeRequestSchema = SessionIdSchema

export type VerifyEmailCodeToken200ResponseSchema = SessionIdSchema & {
  email: EmailSchema
  password: StrongPasswordSchema
  firstName: string
  lastName: string
  dateOfBirth: string
  phone: PhoneNumberSchema
  [k: string]: unknown
}

export type VerifyEmailCodeToken400ResponseSchema = ValidationErrorResponseSchema

export type VerifyEmailCodeToken401ResponseSchema = InvalidConfirmEmailCodeTokenErrorResponseSchema

export type VerifyEmailCodeToken405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyEmailCodeToken410ResponseSchema = TokenExpiredErrorResponseSchema

export type VerifyEmailCodeToken415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyEmailCodeToken429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyEmailCodeToken500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyEmailCodeTokenRequestSchema = {
  token: string
  [k: string]: unknown
}

export type VerifyEmailConfirmationCode200ResponseSchema = OkResponseSchema

export type VerifyEmailConfirmationCode400ResponseSchema = ValidationErrorResponseSchema

export type VerifyEmailConfirmationCode401ResponseSchema = InvalidConfirmUserCodeErrorResponseSchema

export type VerifyEmailConfirmationCode405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyEmailConfirmationCode410ResponseSchema = ExpiredSession

export type VerifyEmailConfirmationCode415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyEmailConfirmationCode429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyEmailConfirmationCode500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyEmailConfirmationCodeRequestSchema = SessionIdSchema & {
  code: string
  [k: string]: unknown
}

export type CreateUser200ResponseSchema = OkResponseSchema

export type CreateUser400ResponseSchema = ValidationErrorResponseSchema

export type CreateUser405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type CreateUser409ResponseSchema = UserAlreadyExistsErrorResponseSchema

export type CreateUser415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type CreateUser429ResponseSchema = ThrottlingErrorResponseSchema

export type CreateUser500ResponseSchema = UnexpectedErrorResponseSchema

export type CreateUserRequestSchema = SessionIdSchema

export type ValidateVat200ResponseSchema = OkResponseSchema

export type ValidateVat400ResponseSchema = ValidationErrorResponseSchema

export type ValidateVat405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type ValidateVat415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type ValidateVat429ResponseSchema = ThrottlingErrorResponseSchema

export type ValidateVat500ResponseSchema = UnexpectedErrorResponseSchema

export type ValidateVatRequestSchema = {
  socialReason: string
  vatNumber: string
  [k: string]: unknown
}

export type CompanyDetailSchema = {
  vat: string
  fiscalCode: string
  name: string
  invoiceRecipientCode: string
  completeAddress: string
  cap: string
  city: string
  province: string
  [k: string]: unknown
}

export type SessionIdSchema = {
  sessionId: UuidSchema
  [k: string]: unknown
}

export type AuthAdmin200ResponseSchema = {
  stagingToken: string
  [k: string]: unknown
}

export type AuthAdmin400ResponseSchema = ValidationErrorResponseSchema

export type AuthAdmin401ResponseSchema = UnauthenticatedErrorResponseSchema

export type AuthAdmin405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type AuthAdmin415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type AuthAdmin429ResponseSchema = ThrottlingErrorResponseSchema

export type AuthAdmin500ResponseSchema = UnexpectedErrorResponseSchema

export type AuthAdminRequestSchema = {
  username: string
  password: string
  [k: string]: unknown
}

export type VerifyStagingToken200ResponseSchema = OkResponseSchema

export type VerifyStagingToken400ResponseSchema = ValidationErrorResponseSchema

export type VerifyStagingToken401ResponseSchema = UnauthenticatedErrorResponseSchema

export type VerifyStagingToken405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type VerifyStagingToken415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type VerifyStagingToken429ResponseSchema = ThrottlingErrorResponseSchema

export type VerifyStagingToken500ResponseSchema = UnexpectedErrorResponseSchema

export type VerifyStagingTokenRequestSchema = {
  token: string
  [k: string]: unknown
}

export type GetCities200ResponseSchema = GeneralPositionSchema[]

export type GetCities400ResponseSchema = ValidationErrorResponseSchema

export type GetCities405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetCities415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetCities429ResponseSchema = ThrottlingErrorResponseSchema

export type GetCities500ResponseSchema = UnexpectedErrorResponseSchema

export type GetCitiesRequestSchema = SearchTypeSchema | PlaceSearchSchema | IdSearchSchema

export type IdSearchSchema = {
  searchType: "id"
  id: UuidSchema[]
  [k: string]: unknown
}

export type GeneralPositionSchema = {
  id: UuidSchema
  country: string
  region: string
  province: ProvinceSchema
  city: string
  postalCode: string
  coordinates: CoordinatesRequestSchema
  [k: string]: unknown
}

export type PlaceSearchSchema = {
  searchType: "place"
  place: string[]
  [k: string]: unknown
}

export type PositionNameCodeSchema = {
  name: string
  code: string
  [k: string]: unknown
}

export type ProvinceSchema = {
  name: string
  code: string
  [k: string]: unknown
}

export type SearchTypeSchema = {
  searchType: "search"
  search?: string
  [k: string]: unknown
}

export type Verify2FaCode200ResponseSchema = LoginResponseSchema

export type Verify2FaCode400ResponseSchema = ValidationErrorResponseSchema

export type Verify2FaCode401ResponseSchema = WrongVerificationCodeErrorResponseSchema

export type Verify2FaCode404ResponseSchema = GenericNotFoundErrorResponseSchema

export type Verify2FaCode405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type Verify2FaCode410ResponseSchema = VerificationCodeExpiredErrorResponseSchema

export type Verify2FaCode415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type Verify2FaCode429ResponseSchema = ThrottlingErrorResponseSchema

export type Verify2FaCode500ResponseSchema = UnexpectedErrorResponseSchema

export type Verify2FaCodeRequestSchema = {
  id: UuidSchema
  code: string
  rememberUser: boolean
  [k: string]: unknown
}

export type Update2FaCode200ResponseSchema = OkResponseSchema

export type Update2FaCode400ResponseSchema = ValidationErrorResponseSchema

export type Update2FaCode404ResponseSchema = GenericNotFoundErrorResponseSchema

export type Update2FaCode405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type Update2FaCode410ResponseSchema = VerificationCodeExpiredErrorResponseSchema

export type Update2FaCode415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type Update2FaCode429ResponseSchema = ThrottlingErrorResponseSchema

export type Update2FaCode500ResponseSchema = UnexpectedErrorResponseSchema

export type Update2FaCodeRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type Verify2FaId200ResponseSchema = OkResponseSchema

export type Verify2FaId400ResponseSchema = ValidationErrorResponseSchema

export type Verify2FaId404ResponseSchema = GenericNotFoundErrorResponseSchema

export type Verify2FaId405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type Verify2FaId415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type Verify2FaId429ResponseSchema = ThrottlingErrorResponseSchema

export type Verify2FaId500ResponseSchema = UnexpectedErrorResponseSchema

export type Verify2FaIdRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type UpdateSecuritySettings200ResponseSchema = OkResponseSchema

export type UpdateSecuritySettings400ResponseSchema = ValidationErrorResponseSchema

export type UpdateSecuritySettings401ResponseSchema = UnauthenticatedErrorResponseSchema

export type UpdateSecuritySettings405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type UpdateSecuritySettings415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type UpdateSecuritySettings429ResponseSchema = ThrottlingErrorResponseSchema

export type UpdateSecuritySettings500ResponseSchema = UnexpectedErrorResponseSchema

export type UpdateSecuritySettingsRequestSchema = {
  twoFa?: boolean
  [k: string]: unknown
}

export type Resend2FaCode200ResponseSchema = OkResponseSchema

export type Resend2FaCode400ResponseSchema = ValidationErrorResponseSchema

export type Resend2FaCode404ResponseSchema = GenericNotFoundErrorResponseSchema

export type Resend2FaCode405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type Resend2FaCode410ResponseSchema = VerificationCodeExpiredErrorResponseSchema

export type Resend2FaCode415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type Resend2FaCode429ResponseSchema = ThrottlingErrorResponseSchema

export type Resend2FaCode500ResponseSchema = UnexpectedErrorResponseSchema

export type Resend2FaCodeRequestSchema = {
  id: UuidSchema
  [k: string]: unknown
}

export type GetSeasonOffers200ResponseSchema = SeasonOfferSchema[]

export type GetSeasonOffers400ResponseSchema = ValidationErrorResponseSchema

export type GetSeasonOffers405ResponseSchema = MethodNotAllowedErrorResponseSchema

export type GetSeasonOffers415ResponseSchema = UnsupportedMediaTypeErrorResponseSchema

export type GetSeasonOffers429ResponseSchema = ThrottlingErrorResponseSchema

export type GetSeasonOffers500ResponseSchema = UnexpectedErrorResponseSchema

export type GetSeasonOffersRequestSchema = {
  ids?: UuidSchema[]
  [k: string]: unknown
}

export type SeasonOfferSchema = {
  id: UuidSchema
  destination: GeneralPositionSchema
  luggages: PackagesLuggageSchema[]
  type: "FAMILY" | "COUPLE" | "FRIENDS"
  esteemCost: CostSchema
  startDate: DateSchema
  endDate?: DateSchema
  [k: string]: unknown
}
